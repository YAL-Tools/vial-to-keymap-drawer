package via;
import haxe.Json;
import sys.io.File;
import tools.ERegTools;
import tools.JsonParserWithComments;

/**
 * How to run (from `src/`):
 * haxe --neko via/ViaKeyNamesGen.n -main via.ViaKeyNamesGen
 * neko via/ViaKeyNamesGen.n
 * @author YellowAfterlife
 */
class ViaKeyNamesGen {
	public static function main() {
		var ts = File.getContent("via/key.ts");
		var b = new StringBuf();
		for (line in [
			"package via;",
			"/** ",
			" * Generated by ViaKeyNamesGen.hx",
			" * from the-via/app: src/utils/key.ts",
			" */",
			"class ViaKeyNames {",
			"	public static var map:Map<String, String> = ["
		]) b.add(line + "\r\n");
		
		// You know what time it is? That's right,
		// it's time to parse TypeScript with a modified JSON parser.
		var rxGetKeyCodes = new EReg("\nexport function getKeycodes"
			+ ".+?" + "\\{\r?\n[ \t]*" + "return\\s*"
			+ "(\\[[\\s\\S]+?\\]);\r?\n"
		+ "\\}", "");
		rxGetKeyCodes.match(ts);
		var expr = rxGetKeyCodes.matched(1);
		expr = StringTools.replace(expr, "buildLayerMenu(),", "");
		var menus:Array<IKeycodeMenu> = JsonParserWithComments.parse(expr);
		for (menu in menus) {
			for (key in menu.keycodes) {
				b.add("\t\t" + Json.stringify(key.code) + " => " + Json.stringify(key.name) + ",\r\n");
			}
		}
		b.add("\t];\r\n");
		b.add("}\r\n");
		File.saveContent("via/ViaKeyNames.hx", b.toString());
		Sys.println("OK!");
	}
}
typedef IKeycodeMenu = {
	id:String,
	label:String,
	keycodes:Array<IKeycodeItem>,
};
typedef IKeycodeItem = {
	name:String,
	code:String,
	?keys:String,
	?title:String,
};