// Generated by Haxe 4.3.0
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
};
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.find = function(id,c) {
	return window.document.getElementById(id);
};
Main.convert = function() {
	var opt = new VilToDrawerOpt();
	opt.qmkKeyboard = StringTools.trim(Main.fdKeyboard.value);
	opt.qmkLayout = StringTools.trim(Main.fdLayout.value);
	opt.parseVil(Main.fdVil.value);
	opt.halfAfterHalf = Main.cbHalfAfterHalf.checked;
	opt.mirrorRightHalf = Main.cbMirrorRightHalf.checked;
	opt.parseLayerNames(Main.fdLayerNames.value);
	opt.parseMoveDefs(Main.fdMoveDefs.value);
	Main.fdOut.value = VilToDrawer.runTxt(opt);
};
Main.main = function() {
	Main.ffVil.onchange = function(e) {
		var file = Main.ffVil.files[0];
		if(file == null) {
			return;
		}
		var fileReader = new FileReader();
		fileReader.onloadend = function() {
			Main.fmVil.reset();
		};
		fileReader.onload = function() {
			Main.fdVil.value = fileReader.result;
		};
		fileReader.readAsText(file);
	};
	Main.btConvert.onclick = function() {
		Main.convert();
	};
	Main.convert();
};
var Std = function() { };
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var VilToDrawer = function() { };
VilToDrawer.run = function(opt) {
	var vkm = opt.vil;
	var dkLayers = { };
	var vLayers = [];
	var _g_current = 0;
	var _g_array = vkm.layout;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var i = _g_key;
		var layer = _g_value;
		var rows = layer.slice();
		var _g_current1 = 0;
		var _g_array1 = rows;
		while(_g_current1 < _g_array1.length) {
			var _g_value1 = _g_array1[_g_current1];
			var _g_key1 = _g_current1++;
			var i1 = _g_key1;
			var row = _g_value1;
			rows[i1] = row.slice();
		}
		var _g = 0;
		var _g1 = opt.moveDefs;
		while(_g < _g1.length) {
			var def = _g1[_g];
			++_g;
			var key = rows[def.srcRow].splice(def.srcCol,1)[0];
			rows[def.dstRow].splice(def.dstCol,0,key);
		}
		var rowCount = layer.length;
		var halfRowCount = rowCount >> 1;
		var _g2 = [];
		var _g3 = 0;
		var _g4 = rowCount;
		while(_g3 < _g4) {
			var _ = _g3++;
			_g2.push(null);
		}
		var newRows = _g2;
		var _g_current2 = 0;
		var _g_array2 = rows;
		while(_g_current2 < _g_array2.length) {
			var _g_value2 = _g_array2[_g_current2];
			var _g_key2 = _g_current2++;
			var rk = _g_key2;
			var row1 = _g_value2;
			var dk = rk;
			if(opt.halfAfterHalf) {
				if(dk >= halfRowCount) {
					dk = (dk - halfRowCount) * 2 + 1;
					if(opt.mirrorRightHalf) {
						row1.reverse();
					}
				} else {
					dk *= 2;
				}
			}
			newRows[dk] = row1;
		}
		var keys = [];
		var _g5 = 0;
		while(_g5 < newRows.length) {
			var row2 = newRows[_g5];
			++_g5;
			var _g6 = 0;
			while(_g6 < row2.length) {
				var key1 = row2[_g6];
				++_g6;
				keys.push(key1);
			}
		}
		vLayers.push(keys);
	}
	var _g_current = 0;
	var _g_array = vLayers;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var li = _g_key;
		var vkeys = _g_value;
		var dkeys = [];
		var _g_current1 = 0;
		var _g_array1 = vkeys;
		while(_g_current1 < _g_array1.length) {
			var _g_value1 = _g_array1[_g_current1];
			var _g_key1 = _g_current1++;
			var k = _g_key1;
			var kc = _g_value1;
			var dk = vial_VialKey.toDrawerKey(kc,opt);
			var mo = "MO(" + li + ")";
			var lts = "LT" + li + "(";
			var held = false;
			var _g = 0;
			while(_g < vLayers.length) {
				var vkeys2 = vLayers[_g];
				++_g;
				if(vkeys == vkeys2) {
					continue;
				}
				var kc2 = vkeys2[k];
				if(kc2 == null) {
					continue;
				}
				if(kc2 == mo || StringTools.startsWith(kc2,lts)) {
					held = true;
					break;
				}
			}
			if(held) {
				var dkx;
				if(typeof(dk) == "string") {
					dkx = { t : dk};
				} else {
					dkx = dk;
				}
				dkx.type = "held";
				if(dkx.t == vial_VialKeyNames.map.h["KC_TRNS"]) {
					dkx.t = "";
				}
				dk = dkx;
			}
			dkeys.push(dk);
		}
		dkLayers[opt.getLayerName(li,true)] = dkeys;
	}
	var dCombos = [];
	var _g = 0;
	var _g1 = vkm.combo;
	while(_g < _g1.length) {
		var vCombo = _g1[_g];
		++_g;
		var iResult = vCombo.length - 1;
		var inKeys = [];
		var _g2 = 0;
		var _g3 = iResult;
		while(_g2 < _g3) {
			var i = _g2++;
			if(vial_VialKey.isValid(vCombo[i])) {
				inKeys.push(vCombo[i]);
			}
		}
		if(inKeys.length < 2) {
			continue;
		}
		var cResult = vCombo[iResult];
		if(!vial_VialKey.isValid(cResult)) {
			continue;
		}
		var _g_current = 0;
		var _g_array = vLayers;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var li = _g_key;
			var vKeys = _g_value;
			var keyPos = [];
			var _g4 = 0;
			while(_g4 < inKeys.length) {
				var key = inKeys[_g4];
				++_g4;
				var kp = vKeys.indexOf(key);
				if(kp >= 0) {
					keyPos.push(kp);
				} else {
					break;
				}
			}
			if(keyPos.length < inKeys.length) {
				continue;
			}
			dCombos.push({ p : keyPos, k : vial_VialKey.toDrawerKey(cResult,opt), l : [opt.getLayerName(li,true)]});
		}
	}
	var dkm = { layout : { qmk_keyboard : opt.qmkKeyboard}, layers : dkLayers, combos : dCombos};
	if(opt.qmkLayout != null && opt.qmkLayout != "") {
		dkm.layout.qmk_layout = opt.qmkLayout;
	}
	return dkm;
};
VilToDrawer.runTxt = function(opt) {
	var dkm = VilToDrawer.run(opt);
	return JSON.stringify(dkm,null,"  ");
};
var VilToDrawerOpt = function() {
	this.moveDefs = [];
	this.layerNames = [];
	this.mirrorRightHalf = false;
	this.halfAfterHalf = false;
	this.qmkLayout = null;
	this.qmkKeyboard = null;
};
VilToDrawerOpt.prototype = {
	getLayerName: function(i,long) {
		if(i < this.layerNames.length) {
			var l = this.layerNames[i];
			if(long) {
				return l.long;
			} else {
				return l.short;
			}
		} else {
			return "L" + i;
		}
	}
	,parseVil: function(txt) {
		this.vil = JSON.parse(txt);
	}
	,parseLayerNames: function(txt) {
		txt = StringTools.trim(StringTools.replace(txt,"\r",""));
		var rx = VilToDrawerOpt.rxLayerShortLong;
		var _g = 0;
		var _g1 = txt.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			line = StringTools.trim(line);
			if(rx.match(line)) {
				this.layerNames.push({ short : rx.matched(1), long : rx.matched(0)});
			} else if(line.length <= 6) {
				this.layerNames.push({ short : line, long : line});
			} else {
				var lis = "L" + this.layerNames.length;
				this.layerNames.push({ short : lis, long : lis + ": " + line});
			}
		}
	}
	,parseMoveDefs: function(txt) {
		var _gthis = this;
		tools_ERegTools.each(VilToDrawerOpt.rxMoveDef,txt,function(rx) {
			_gthis.moveDefs.push({ srcRow : Std.parseInt(rx.matched(1)), srcCol : Std.parseInt(rx.matched(2)), dstRow : Std.parseInt(rx.matched(3)), dstCol : Std.parseInt(rx.matched(4))});
		});
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var tools_ERegTools = function() { };
tools_ERegTools.escapeRx = function(s) {
	return s.replace(tools_ERegTools.escapeRx_1.r,"\\$1");
};
tools_ERegTools.each = function(r,s,f) {
	var i = 0;
	while(r.matchSub(s,i)) {
		var p = r.matchedPos();
		f(r);
		i = p.pos + p.len;
	}
};
var vial_VialKey = {};
vial_VialKey.toDrawerKey = function(this1,opt) {
	var kc = this1;
	if(kc == null || kc == "" || kc == "KC_NO") {
		return null;
	}
	if(vial_VialKey.rx_modTap.match(kc)) {
		var key = vial_VialKey.rx_modTap.matched(1);
		var t = vial_VialKey.rx_modTap.matched(2);
		return { t : vial_VialKey.toDrawerKey(t,opt), h : key};
	}
	if(vial_VialKey.rx_layer.match(kc)) {
		var li = Std.parseInt(vial_VialKey.rx_layer.matched(2));
		return vial_VialKey.rx_layer.matched(1) + " " + opt.getLayerName(li,false);
	}
	if(vial_VialKey.rx_lt.match(kc)) {
		var h = "MO(" + vial_VialKey.rx_lt.matched(1) + ")";
		var t = vial_VialKey.rx_lt.matched(2);
		return { t : vial_VialKey.toDrawerKey(t,opt), h : vial_VialKey.toDrawerKey(h,opt)};
	}
	if(vial_VialKey.rx_pair.match(kc)) {
		var f = vial_VialKey.rx_pair.matched(1);
		var k = vial_VialKey.rx_pair.matched(2);
		return { t : vial_VialKey.toDrawerKey(k,opt), s : vial_VialKey.toDrawerKey(f,opt)};
	}
	var fullName = vial_VialKeyNames.map.h[kc];
	if(fullName != null) {
		return fullName;
	}
	if(StringTools.startsWith(kc,"KC_")) {
		return HxOverrides.substr(kc,3,null);
	}
	return kc;
};
vial_VialKey.isValid = function(this1) {
	if(this1 == null) {
		return false;
	} else {
		switch(this1) {
		case "":case "KC_NO":
			return false;
		default:
			return true;
		}
	}
};
var vial_VialKeyNames = function() { };
var vial_VialKeymapTapDance = {};
vial_VialKeymapTapDance.get_tap = function(this1) {
	return this1[0];
};
vial_VialKeymapTapDance.set_tap = function(this1,k) {
	return this1[0] = k;
};
vial_VialKeymapTapDance.get_hold = function(this1) {
	return this1[1];
};
vial_VialKeymapTapDance.set_hold = function(this1,k) {
	return this1[1] = k;
};
vial_VialKeymapTapDance.get_doubleTap = function(this1) {
	return this1[2];
};
vial_VialKeymapTapDance.set_doubleTap = function(this1,k) {
	return this1[2] = k;
};
vial_VialKeymapTapDance.get_tapHold = function(this1) {
	return this1[3];
};
vial_VialKeymapTapDance.set_tapHold = function(this1,k) {
	return this1[3] = k;
};
vial_VialKeymapTapDance.get_tapTerm = function(this1) {
	return this1[4];
};
vial_VialKeymapTapDance.set_tapTerm = function(this1,t) {
	return this1[4] = t;
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
Main.fdVil = window.document.getElementById("vil");
Main.fdOut = window.document.getElementById("out");
Main.fmVil = window.document.getElementById("vil-form");
Main.ffVil = window.document.getElementById("vil-picker");
Main.cbHalfAfterHalf = window.document.getElementById("half-after-half");
Main.cbMirrorRightHalf = window.document.getElementById("mirror-right-half");
Main.fdKeyboard = window.document.getElementById("keyboard");
Main.fdLayout = window.document.getElementById("layout");
Main.fdMoveDefs = window.document.getElementById("move-defs");
Main.fdLayerNames = window.document.getElementById("layer-names");
Main.btConvert = window.document.getElementById("convert");
VilToDrawerOpt.rxLayerShortLong = new EReg("^(\\S{1,6})(?::.*|\\s+\\(.*\\))$","");
VilToDrawerOpt.rxMoveDef = new EReg("^\\s*(\\d+),\\s*(\\d+)\\s*=>\\s*(\\d+),\\s*(\\d+)","gm");
tools_ERegTools.escapeRx_1 = new EReg("([.*+?^${}()|[\\]\\/\\\\])","g");
vial_VialKey.rx_modTap = new EReg("^" + "(\\w+)_T" + "\\(" + "(.+)" + "\\)","");
vial_VialKey.rx_lt = new EReg("^LT(\\d)" + "\\(" + "(.+)" + "\\)$","");
vial_VialKey.rx_layer = new EReg("^(MO|DF|TG|TT|OSL|TO)" + "\\(" + "(\\d+)" + "\\)$","");
vial_VialKey.rx_pair = new EReg("^(\\w+)" + "\\(" + "(.+)" + "\\)$","");
vial_VialKeyNames.map = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["KC_TRNS"] = "▽";
	_g.h["KC_NUMLOCK"] = "Num\nLock";
	_g.h["KC_KP_SLASH"] = "/";
	_g.h["KC_KP_ASTERISK"] = "*";
	_g.h["KC_KP_MINUS"] = "-";
	_g.h["KC_KP_PLUS"] = "+";
	_g.h["KC_KP_ENTER"] = "Num\nEnter";
	_g.h["KC_KP_1"] = "1";
	_g.h["KC_KP_2"] = "2";
	_g.h["KC_KP_3"] = "3";
	_g.h["KC_KP_4"] = "4";
	_g.h["KC_KP_5"] = "5";
	_g.h["KC_KP_6"] = "6";
	_g.h["KC_KP_7"] = "7";
	_g.h["KC_KP_8"] = "8";
	_g.h["KC_KP_9"] = "9";
	_g.h["KC_KP_0"] = "0";
	_g.h["KC_KP_DOT"] = ".";
	_g.h["KC_KP_EQUAL"] = "=";
	_g.h["KC_KP_COMMA"] = ",";
	_g.h["KC_PSCREEN"] = "Print\nScreen";
	_g.h["KC_SCROLLLOCK"] = "Scroll\nLock";
	_g.h["KC_PAUSE"] = "Pause";
	_g.h["KC_INSERT"] = "Insert";
	_g.h["KC_HOME"] = "Home";
	_g.h["KC_PGUP"] = "Page\nUp";
	_g.h["KC_DELETE"] = "Del";
	_g.h["KC_END"] = "End";
	_g.h["KC_PGDOWN"] = "Page\nDown";
	_g.h["KC_RIGHT"] = "Right";
	_g.h["KC_LEFT"] = "Left";
	_g.h["KC_DOWN"] = "Down";
	_g.h["KC_UP"] = "Up";
	_g.h["KC_A"] = "A";
	_g.h["KC_B"] = "B";
	_g.h["KC_C"] = "C";
	_g.h["KC_D"] = "D";
	_g.h["KC_E"] = "E";
	_g.h["KC_F"] = "F";
	_g.h["KC_G"] = "G";
	_g.h["KC_H"] = "H";
	_g.h["KC_I"] = "I";
	_g.h["KC_J"] = "J";
	_g.h["KC_K"] = "K";
	_g.h["KC_L"] = "L";
	_g.h["KC_M"] = "M";
	_g.h["KC_N"] = "N";
	_g.h["KC_O"] = "O";
	_g.h["KC_P"] = "P";
	_g.h["KC_Q"] = "Q";
	_g.h["KC_R"] = "R";
	_g.h["KC_S"] = "S";
	_g.h["KC_T"] = "T";
	_g.h["KC_U"] = "U";
	_g.h["KC_V"] = "V";
	_g.h["KC_W"] = "W";
	_g.h["KC_X"] = "X";
	_g.h["KC_Y"] = "Y";
	_g.h["KC_Z"] = "Z";
	_g.h["KC_1"] = "!\n1";
	_g.h["KC_2"] = "@\n2";
	_g.h["KC_3"] = "#\n3";
	_g.h["KC_4"] = "$\n4";
	_g.h["KC_5"] = "%\n5";
	_g.h["KC_6"] = "^\n6";
	_g.h["KC_7"] = "&\n7";
	_g.h["KC_8"] = "*\n8";
	_g.h["KC_9"] = "(\n9";
	_g.h["KC_0"] = ")\n0";
	_g.h["KC_ENTER"] = "Enter";
	_g.h["KC_ESCAPE"] = "Esc";
	_g.h["KC_BSPACE"] = "Bksp";
	_g.h["KC_TAB"] = "Tab";
	_g.h["KC_SPACE"] = "Space";
	_g.h["KC_MINUS"] = "_\n-";
	_g.h["KC_EQUAL"] = "+\n=";
	_g.h["KC_LBRACKET"] = "{\n[";
	_g.h["KC_RBRACKET"] = "}\n]";
	_g.h["KC_BSLASH"] = "|\n\\";
	_g.h["KC_SCOLON"] = ":\n;";
	_g.h["KC_QUOTE"] = "\"\n'";
	_g.h["KC_GRAVE"] = "~\n`";
	_g.h["KC_COMMA"] = "<\n,";
	_g.h["KC_DOT"] = ">\n.";
	_g.h["KC_SLASH"] = "?\n/";
	_g.h["KC_CAPSLOCK"] = "Caps\nLock";
	_g.h["KC_F1"] = "F1";
	_g.h["KC_F2"] = "F2";
	_g.h["KC_F3"] = "F3";
	_g.h["KC_F4"] = "F4";
	_g.h["KC_F5"] = "F5";
	_g.h["KC_F6"] = "F6";
	_g.h["KC_F7"] = "F7";
	_g.h["KC_F8"] = "F8";
	_g.h["KC_F9"] = "F9";
	_g.h["KC_F10"] = "F10";
	_g.h["KC_F11"] = "F11";
	_g.h["KC_F12"] = "F12";
	_g.h["KC_APPLICATION"] = "Menu";
	_g.h["KC_LCTRL"] = "LCtrl";
	_g.h["KC_LSHIFT"] = "LShift";
	_g.h["KC_LALT"] = "LAlt";
	_g.h["KC_LGUI"] = "LGui";
	_g.h["KC_RCTRL"] = "RCtrl";
	_g.h["KC_RSHIFT"] = "RShift";
	_g.h["KC_RALT"] = "RAlt";
	_g.h["KC_RGUI"] = "RGui";
	_g.h["KC_NONUS_HASH"] = "~\n#";
	_g.h["KC_NONUS_BSLASH"] = "|\n\\";
	_g.h["KC_RO"] = "_\n\\";
	_g.h["KC_KANA"] = "カタカナ\nひらがな";
	_g.h["KC_JYEN"] = "|\n¥";
	_g.h["KC_HENK"] = "変換";
	_g.h["KC_MHEN"] = "無変換";
	_g.h["KC_LANG1"] = "한영\nかな";
	_g.h["KC_LANG2"] = "漢字\n英数";
	_g.h["RESET"] = "Reset";
	_g.h["OSM(MOD_LSFT)"] = "OSM\nLSft";
	_g.h["OSM(MOD_LCTL)"] = "OSM\nLCtl";
	_g.h["OSM(MOD_LALT)"] = "OSM\nLAlt";
	_g.h["OSM(MOD_LGUI)"] = "OSM\nLGUI";
	_g.h["OSM(MOD_RSFT)"] = "OSM\nRSft";
	_g.h["OSM(MOD_RCTL)"] = "OSM\nRCtl";
	_g.h["OSM(MOD_RALT)"] = "OSM\nRAlt";
	_g.h["OSM(MOD_RGUI)"] = "OSM\nRGUI";
	_g.h["OSM(MOD_LCTL|MOD_LSFT)"] = "OSM\nCS";
	_g.h["OSM(MOD_LCTL|MOD_LALT)"] = "OSM\nCA";
	_g.h["OSM(MOD_LCTL|MOD_LGUI)"] = "OSM\nCG";
	_g.h["OSM(MOD_LSFT|MOD_LALT)"] = "OSM\nSA";
	_g.h["OSM(MOD_LSFT|MOD_LGUI)"] = "OSM\nSG";
	_g.h["OSM(MOD_LALT|MOD_LGUI)"] = "OSM\nAG";
	_g.h["OSM(MOD_RCTL|MOD_RSFT)"] = "OSM\nRCS";
	_g.h["OSM(MOD_RCTL|MOD_RALT)"] = "OSM\nRCA";
	_g.h["OSM(MOD_RCTL|MOD_RGUI)"] = "OSM\nRCG";
	_g.h["OSM(MOD_RSFT|MOD_RALT)"] = "OSM\nRSA";
	_g.h["OSM(MOD_RSFT|MOD_RGUI)"] = "OSM\nRSG";
	_g.h["OSM(MOD_RALT|MOD_RGUI)"] = "OSM\nRAG";
	_g.h["OSM(MOD_LCTL|MOD_LSFT|MOD_LGUI)"] = "OSM\nCSG";
	_g.h["OSM(MOD_LCTL|MOD_LALT|MOD_LGUI)"] = "OSM\nCAG";
	_g.h["OSM(MOD_LSFT|MOD_LALT|MOD_LGUI)"] = "OSM\nSAG";
	_g.h["OSM(MOD_RCTL|MOD_RSFT|MOD_RGUI)"] = "OSM\nRCSG";
	_g.h["OSM(MOD_RCTL|MOD_RALT|MOD_RGUI)"] = "OSM\nRCAG";
	_g.h["OSM(MOD_RSFT|MOD_RALT|MOD_RGUI)"] = "OSM\nRSAG";
	_g.h["OSM(MOD_MEH)"] = "OSM\nMeh";
	_g.h["OSM(MOD_HYPR)"] = "OSM\nHyper";
	_g.h["OSM(MOD_RCTL|MOD_RSFT|MOD_RALT)"] = "OSM\nRMeh";
	_g.h["OSM(MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)"] = "OSM\nRHyp";
	_g.h["LSFT(kc)"] = "LSft\n(kc)";
	_g.h["LCTL(kc)"] = "LCtl\n(kc)";
	_g.h["LALT(kc)"] = "LAlt\n(kc)";
	_g.h["LGUI(kc)"] = "LGui\n(kc)";
	_g.h["RSFT(kc)"] = "RSft\n(kc)";
	_g.h["RCTL(kc)"] = "RCtl\n(kc)";
	_g.h["RALT(kc)"] = "RAlt\n(kc)";
	_g.h["RGUI(kc)"] = "RGui\n(kc)";
	_g.h["C_S(kc)"] = "LCS\n(kc)";
	_g.h["LCA(kc)"] = "LCA\n(kc)";
	_g.h["LCG(kc)"] = "LCG\n(kc)";
	_g.h["LSA(kc)"] = "LSA\n(kc)";
	_g.h["SGUI(kc)"] = "LSG\n(kc)";
	_g.h["LCAG(kc)"] = "LCAG\n(kc)";
	_g.h["RCG(kc)"] = "RCG\n(kc)";
	_g.h["MEH(kc)"] = "Meh\n(kc)";
	_g.h["HYPR(kc)"] = "Hyper\n(kc)";
	_g.h["LSFT_T(kc)"] = "LSft_T\n(kc)";
	_g.h["LCTL_T(kc)"] = "LCtl_T\n(kc)";
	_g.h["LALT_T(kc)"] = "LAlt_T\n(kc)";
	_g.h["LGUI_T(kc)"] = "LGui_T\n(kc)";
	_g.h["RSFT_T(kc)"] = "RSft_T\n(kc)";
	_g.h["RCTL_T(kc)"] = "RCtl_T\n(kc)";
	_g.h["RALT_T(kc)"] = "RAlt_T\n(kc)";
	_g.h["RGUI_T(kc)"] = "RGui_T\n(kc)";
	_g.h["C_S_T(kc)"] = "LCS_T\n(kc)";
	_g.h["LCA_T(kc)"] = "LCA_T\n(kc)";
	_g.h["LCG_T(kc)"] = "LCG_T\n(kc)";
	_g.h["LSA_T(kc)"] = "LSA_T\n(kc)";
	_g.h["SGUI_T(kc)"] = "LSG_T\n(kc)";
	_g.h["LCAG_T(kc)"] = "LCAG_T\n(kc)";
	_g.h["RCG_T(kc)"] = "RCG_T\n(kc)";
	_g.h["RCAG_T(kc)"] = "RCAG_T\n(kc)";
	_g.h["MEH_T(kc)"] = "Meh_T\n(kc)";
	_g.h["ALL_T(kc)"] = "ALL_T\n(kc)";
	_g.h["KC_GESC"] = "~\nEsc";
	_g.h["KC_LSPO"] = "LS\n(";
	_g.h["KC_RSPC"] = "RS\n)";
	_g.h["KC_LCPO"] = "LC\n(";
	_g.h["KC_RCPC"] = "RC\n)";
	_g.h["KC_LAPO"] = "LA\n(";
	_g.h["KC_RAPC"] = "RA\n)";
	_g.h["KC_SFTENT"] = "RS\nEnter";
	_g.h["MAGIC_SWAP_CONTROL_CAPSLOCK"] = "Swap\nCtrl\nCaps";
	_g.h["MAGIC_UNSWAP_CONTROL_CAPSLOCK"] = "Unswap\nCtrl\nCaps";
	_g.h["MAGIC_CAPSLOCK_TO_CONTROL"] = "Caps\nto\nCtrl";
	_g.h["MAGIC_UNCAPSLOCK_TO_CONTROL"] = "Caps\nnot to\nCtrl";
	_g.h["MAGIC_SWAP_LCTL_LGUI"] = "Swap\nLCtl\nLGui";
	_g.h["MAGIC_UNSWAP_LCTL_LGUI"] = "Unswap\nLCtl\nLGui";
	_g.h["MAGIC_SWAP_RCTL_RGUI"] = "Swap\nRCtl\nRGui";
	_g.h["MAGIC_UNSWAP_RCTL_RGUI"] = "Unswap\nRCtl\nRGui";
	_g.h["MAGIC_SWAP_CTL_GUI"] = "Swap\nCtl\nGui";
	_g.h["MAGIC_UNSWAP_CTL_GUI"] = "Unswap\nCtl\nGui";
	_g.h["MAGIC_TOGGLE_CTL_GUI"] = "Toggle\nCtl\nGui";
	_g.h["MAGIC_SWAP_LALT_LGUI"] = "Swap\nLAlt\nLGui";
	_g.h["MAGIC_UNSWAP_LALT_LGUI"] = "Unswap\nLAlt\nLGui";
	_g.h["MAGIC_SWAP_RALT_RGUI"] = "Swap\nRAlt\nRGui";
	_g.h["MAGIC_UNSWAP_RALT_RGUI"] = "Unswap\nRAlt\nRGui";
	_g.h["MAGIC_SWAP_ALT_GUI"] = "Swap\nAlt\nGui";
	_g.h["MAGIC_UNSWAP_ALT_GUI"] = "Unswap\nAlt\nGui";
	_g.h["MAGIC_TOGGLE_ALT_GUI"] = "Toggle\nAlt\nGui";
	_g.h["MAGIC_NO_GUI"] = "GUI\nOff";
	_g.h["MAGIC_UNNO_GUI"] = "GUI\nOn";
	_g.h["MAGIC_SWAP_GRAVE_ESC"] = "Swap\n`\nEsc";
	_g.h["MAGIC_UNSWAP_GRAVE_ESC"] = "Unswap\n`\nEsc";
	_g.h["MAGIC_SWAP_BACKSLASH_BACKSPACE"] = "Swap\n\\\nBS";
	_g.h["MAGIC_UNSWAP_BACKSLASH_BACKSPACE"] = "Unswap\n\\\nBS";
	_g.h["MAGIC_HOST_NKRO"] = "NKRO\nOn";
	_g.h["MAGIC_UNHOST_NKRO"] = "NKRO\nOff";
	_g.h["MAGIC_TOGGLE_NKRO"] = "NKRO\nToggle";
	_g.h["MAGIC_EE_HANDS_LEFT"] = "EEH\nLeft";
	_g.h["MAGIC_EE_HANDS_RIGHT"] = "EEH\nRight";
	_g.h["AU_ON"] = "Audio\nON";
	_g.h["AU_OFF"] = "Audio\nOFF";
	_g.h["AU_TOG"] = "Audio\nToggle";
	_g.h["CLICKY_TOGGLE"] = "Clicky\nToggle";
	_g.h["CLICKY_UP"] = "Clicky\nUp";
	_g.h["CLICKY_DOWN"] = "Clicky\nDown";
	_g.h["CLICKY_RESET"] = "Clicky\nReset";
	_g.h["MU_ON"] = "Music\nOn";
	_g.h["MU_OFF"] = "Music\nOff";
	_g.h["MU_TOG"] = "Music\nToggle";
	_g.h["MU_MOD"] = "Music\nCycle";
	_g.h["HPT_ON"] = "Haptic\nOn";
	_g.h["HPT_OFF"] = "Haptic\nOff";
	_g.h["HPT_TOG"] = "Haptic\nToggle";
	_g.h["HPT_RST"] = "Haptic\nReset";
	_g.h["HPT_FBK"] = "Haptic\nFeed\nback";
	_g.h["HPT_BUZ"] = "Haptic\nBuzz";
	_g.h["HPT_MODI"] = "Haptic\nNext";
	_g.h["HPT_MODD"] = "Haptic\nPrev";
	_g.h["HPT_CONT"] = "Haptic\nCont.";
	_g.h["HPT_CONI"] = "Haptic\n+";
	_g.h["HPT_COND"] = "Haptic\n-";
	_g.h["HPT_DWLI"] = "Haptic\nDwell+";
	_g.h["HPT_DWLD"] = "Haptic\nDwell-";
	_g.h["KC_ASDN"] = "Auto-\nshift\nDown";
	_g.h["KC_ASUP"] = "Auto-\nshift\nUp";
	_g.h["KC_ASRP"] = "Auto-\nshift\nReport";
	_g.h["KC_ASON"] = "Auto-\nshift\nOn";
	_g.h["KC_ASOFF"] = "Auto-\nshift\nOff";
	_g.h["KC_ASTG"] = "Auto-\nshift\nToggle";
	_g.h["CMB_ON"] = "Combo\nOn";
	_g.h["CMB_OFF"] = "Combo\nOff";
	_g.h["CMB_TOG"] = "Combo\nToggle";
	_g.h["BL_TOGG"] = "BL\nToggle";
	_g.h["BL_STEP"] = "BL\nCycle";
	_g.h["BL_BRTG"] = "BL\nBreath";
	_g.h["BL_ON"] = "BL On";
	_g.h["BL_OFF"] = "BL Off";
	_g.h["BL_INC"] = "BL +";
	_g.h["BL_DEC"] = "BL - ";
	_g.h["RGB_TOG"] = "RGB\nToggle";
	_g.h["RGB_MOD"] = "RGB\nMode +";
	_g.h["RGB_RMOD"] = "RGB\nMode -";
	_g.h["RGB_HUI"] = "Hue +";
	_g.h["RGB_HUD"] = "Hue -";
	_g.h["RGB_SAI"] = "Sat +";
	_g.h["RGB_SAD"] = "Sat -";
	_g.h["RGB_VAI"] = "Bright +";
	_g.h["RGB_VAD"] = "Bright -";
	_g.h["RGB_SPI"] = "Effect +";
	_g.h["RGB_SPD"] = "Effect -";
	_g.h["RGB_M_P"] = "RGB\nMode P";
	_g.h["RGB_M_B"] = "RGB\nMode B";
	_g.h["RGB_M_R"] = "RGB\nMode R";
	_g.h["RGB_M_SW"] = "RGB\nMode SW";
	_g.h["RGB_M_SN"] = "RGB\nMode SN";
	_g.h["RGB_M_K"] = "RGB\nMode K";
	_g.h["RGB_M_X"] = "RGB\nMode X";
	_g.h["RGB_M_G"] = "RGB\nMode G";
	_g.h["RGB_M_T"] = "RGB\nMode T";
	_g.h["KC_PWR"] = "Power";
	_g.h["KC_SLEP"] = "Sleep";
	_g.h["KC_WAKE"] = "Wake";
	_g.h["KC_EXEC"] = "Exec";
	_g.h["KC_SLCT"] = "Select";
	_g.h["KC_AGIN"] = "Again";
	_g.h["KC_PSTE"] = "Paste";
	_g.h["KC_CALC"] = "Calc";
	_g.h["KC_MAIL"] = "Mail";
	_g.h["KC_MSEL"] = "Media\nPlayer";
	_g.h["KC_MYCM"] = "My\nPC";
	_g.h["KC_WSCH"] = "Browser\nSearch";
	_g.h["KC_WHOM"] = "Browser\nHome";
	_g.h["KC_WBAK"] = "Browser\nBack";
	_g.h["KC_WFWD"] = "Browser\nForward";
	_g.h["KC_WSTP"] = "Browser\nStop";
	_g.h["KC_WREF"] = "Browser\nRefresh";
	_g.h["KC_WFAV"] = "Browser\nFav.";
	_g.h["KC_BRIU"] = "Bright.\nUp";
	_g.h["KC_BRID"] = "Bright.\nDown";
	_g.h["KC_MPRV"] = "Media\nPrev";
	_g.h["KC_MNXT"] = "Media\nNext";
	_g.h["KC_MUTE"] = "Mute";
	_g.h["KC_VOLD"] = "Vol -";
	_g.h["KC_VOLU"] = "Vol +";
	_g.h["KC__VOLDOWN"] = "Vol -\nAlt";
	_g.h["KC__VOLUP"] = "Vol +\nAlt";
	_g.h["KC_MSTP"] = "Media\nStop";
	_g.h["KC_MPLY"] = "Media\nPlay";
	_g.h["KC_MRWD"] = "Prev\nTrack\n(macOS)";
	_g.h["KC_MFFD"] = "Next\nTrack\n(macOS)";
	_g.h["KC_EJCT"] = "Eject";
	_g.h["KC_MS_U"] = "Mouse\nUp";
	_g.h["KC_MS_D"] = "Mouse\nDown";
	_g.h["KC_MS_L"] = "Mouse\nLeft";
	_g.h["KC_MS_R"] = "Mouse\nRight";
	_g.h["KC_BTN1"] = "Mouse\n1";
	_g.h["KC_BTN2"] = "Mouse\n2";
	_g.h["KC_BTN3"] = "Mouse\n3";
	_g.h["KC_BTN4"] = "Mouse\n4";
	_g.h["KC_BTN5"] = "Mouse\n5";
	_g.h["KC_WH_U"] = "Mouse\nWheel\nUp";
	_g.h["KC_WH_D"] = "Mouse\nWheel\nDown";
	_g.h["KC_WH_L"] = "Mouse\nWheel\nLeft";
	_g.h["KC_WH_R"] = "Mouse\nWheel\nRight";
	_g.h["KC_ACL0"] = "Mouse\nAccel\n0";
	_g.h["KC_ACL1"] = "Mouse\nAccel\n1";
	_g.h["KC_ACL2"] = "Mouse\nAccel\n2";
	_g.h["KC_LCAP"] = "Locking\nCaps";
	_g.h["KC_LNUM"] = "Locking\nNum";
	_g.h["KC_LSCR"] = "Locking\nScroll";
	_g.h["DYN_REC_START1"] = "DM1\nRec";
	_g.h["DYN_REC_START2"] = "DM2\nRec";
	_g.h["DYN_REC_STOP"] = "DM Rec\nStop";
	_g.h["DYN_MACRO_PLAY1"] = "DM1\nPlay";
	_g.h["DYN_MACRO_PLAY2"] = "DM2\nPlay";
	_g.h["MI_C"] = "ᴹᴵᴰᴵ\nC";
	_g.h["MI_Cs"] = "ᴹᴵᴰᴵ\nC#/Dᵇ";
	_g.h["MI_D"] = "ᴹᴵᴰᴵ\nD";
	_g.h["MI_Ds"] = "ᴹᴵᴰᴵ\nD#/Eᵇ";
	_g.h["MI_E"] = "ᴹᴵᴰᴵ\nE";
	_g.h["MI_F"] = "ᴹᴵᴰᴵ\nF";
	_g.h["MI_Fs"] = "ᴹᴵᴰᴵ\nF#/Gᵇ";
	_g.h["MI_G"] = "ᴹᴵᴰᴵ\nG";
	_g.h["MI_Gs"] = "ᴹᴵᴰᴵ\nG#/Aᵇ";
	_g.h["MI_A"] = "ᴹᴵᴰᴵ\nA";
	_g.h["MI_As"] = "ᴹᴵᴰᴵ\nA#/Bᵇ";
	_g.h["MI_B"] = "ᴹᴵᴰᴵ\nB";
	_g.h["MI_C_1"] = "ᴹᴵᴰᴵ\nC₁";
	_g.h["MI_Cs_1"] = "ᴹᴵᴰᴵ\nC#₁/Dᵇ₁";
	_g.h["MI_D_1"] = "ᴹᴵᴰᴵ\nD₁";
	_g.h["MI_Ds_1"] = "ᴹᴵᴰᴵ\nD#₁/Eᵇ₁";
	_g.h["MI_E_1"] = "ᴹᴵᴰᴵ\nE₁";
	_g.h["MI_F_1"] = "ᴹᴵᴰᴵ\nF₁";
	_g.h["MI_Fs_1"] = "ᴹᴵᴰᴵ\nF#₁/Gᵇ₁";
	_g.h["MI_G_1"] = "ᴹᴵᴰᴵ\nG₁";
	_g.h["MI_Gs_1"] = "ᴹᴵᴰᴵ\nG#₁/Aᵇ₁";
	_g.h["MI_A_1"] = "ᴹᴵᴰᴵ\nA₁";
	_g.h["MI_As_1"] = "ᴹᴵᴰᴵ\nA#₁/Bᵇ₁";
	_g.h["MI_B_1"] = "ᴹᴵᴰᴵ\nB₁";
	_g.h["MI_C_2"] = "ᴹᴵᴰᴵ\nC₂";
	_g.h["MI_Cs_2"] = "ᴹᴵᴰᴵ\nC#₂/Dᵇ₂";
	_g.h["MI_D_2"] = "ᴹᴵᴰᴵ\nD₂";
	_g.h["MI_Ds_2"] = "ᴹᴵᴰᴵ\nD#₂/Eᵇ₂";
	_g.h["MI_E_2"] = "ᴹᴵᴰᴵ\nE₂";
	_g.h["MI_F_2"] = "ᴹᴵᴰᴵ\nF₂";
	_g.h["MI_Fs_2"] = "ᴹᴵᴰᴵ\nF#₂/Gᵇ₂";
	_g.h["MI_G_2"] = "ᴹᴵᴰᴵ\nG₂";
	_g.h["MI_Gs_2"] = "ᴹᴵᴰᴵ\nG#₂/Aᵇ₂";
	_g.h["MI_A_2"] = "ᴹᴵᴰᴵ\nA₂";
	_g.h["MI_As_2"] = "ᴹᴵᴰᴵ\nA#₂/Bᵇ₂";
	_g.h["MI_B_2"] = "ᴹᴵᴰᴵ\nB₂";
	_g.h["MI_C_3"] = "ᴹᴵᴰᴵ\nC₃";
	_g.h["MI_Cs_3"] = "ᴹᴵᴰᴵ\nC#₃/Dᵇ₃";
	_g.h["MI_D_3"] = "ᴹᴵᴰᴵ\nD₃";
	_g.h["MI_Ds_3"] = "ᴹᴵᴰᴵ\nD#₃/Eᵇ₃";
	_g.h["MI_E_3"] = "ᴹᴵᴰᴵ\nE₃";
	_g.h["MI_F_3"] = "ᴹᴵᴰᴵ\nF₃";
	_g.h["MI_Fs_3"] = "ᴹᴵᴰᴵ\nF#₃/Gᵇ₃";
	_g.h["MI_G_3"] = "ᴹᴵᴰᴵ\nG₃";
	_g.h["MI_Gs_3"] = "ᴹᴵᴰᴵ\nG#₃/Aᵇ₃";
	_g.h["MI_A_3"] = "ᴹᴵᴰᴵ\nA₃";
	_g.h["MI_As_3"] = "ᴹᴵᴰᴵ\nA#₃/Bᵇ₃";
	_g.h["MI_B_3"] = "ᴹᴵᴰᴵ\nB₃";
	_g.h["MI_C_4"] = "ᴹᴵᴰᴵ\nC₄";
	_g.h["MI_Cs_4"] = "ᴹᴵᴰᴵ\nC#₄/Dᵇ₄";
	_g.h["MI_D_4"] = "ᴹᴵᴰᴵ\nD₄";
	_g.h["MI_Ds_4"] = "ᴹᴵᴰᴵ\nD#₄/Eᵇ₄";
	_g.h["MI_E_4"] = "ᴹᴵᴰᴵ\nE₄";
	_g.h["MI_F_4"] = "ᴹᴵᴰᴵ\nF₄";
	_g.h["MI_Fs_4"] = "ᴹᴵᴰᴵ\nF#₄/Gᵇ₄";
	_g.h["MI_G_4"] = "ᴹᴵᴰᴵ\nG₄";
	_g.h["MI_Gs_4"] = "ᴹᴵᴰᴵ\nG#₄/Aᵇ₄";
	_g.h["MI_A_4"] = "ᴹᴵᴰᴵ\nA₄";
	_g.h["MI_As_4"] = "ᴹᴵᴰᴵ\nA#₄/Bᵇ₄";
	_g.h["MI_B_4"] = "ᴹᴵᴰᴵ\nB₄";
	_g.h["MI_C_5"] = "ᴹᴵᴰᴵ\nC₅";
	_g.h["MI_Cs_5"] = "ᴹᴵᴰᴵ\nC#₅/Dᵇ₅";
	_g.h["MI_D_5"] = "ᴹᴵᴰᴵ\nD₅";
	_g.h["MI_Ds_5"] = "ᴹᴵᴰᴵ\nD#₅/Eᵇ₅";
	_g.h["MI_E_5"] = "ᴹᴵᴰᴵ\nE₅";
	_g.h["MI_F_5"] = "ᴹᴵᴰᴵ\nF₅";
	_g.h["MI_Fs_5"] = "ᴹᴵᴰᴵ\nF#₅/Gᵇ₅";
	_g.h["MI_G_5"] = "ᴹᴵᴰᴵ\nG₅";
	_g.h["MI_Gs_5"] = "ᴹᴵᴰᴵ\nG#₅/Aᵇ₅";
	_g.h["MI_A_5"] = "ᴹᴵᴰᴵ\nA₅";
	_g.h["MI_As_5"] = "ᴹᴵᴰᴵ\nA#₅/Bᵇ₅";
	_g.h["MI_B_5"] = "ᴹᴵᴰᴵ\nB₅";
	_g.h["MI_ALLOFF"] = "ᴹᴵᴰᴵ\nNotesᵒᶠᶠ";
	_g.h["MI_OCT_N2"] = "ᴹᴵᴰᴵ\nOct₋₂";
	_g.h["MI_OCT_N1"] = "ᴹᴵᴰᴵ\nOct₋₁";
	_g.h["MI_OCT_0"] = "ᴹᴵᴰᴵ\nOct₀";
	_g.h["MI_OCT_1"] = "ᴹᴵᴰᴵ\nOct₊₁";
	_g.h["MI_OCT_2"] = "ᴹᴵᴰᴵ\nOct₊₂";
	_g.h["MI_OCT_3"] = "ᴹᴵᴰᴵ\nOct₊₃";
	_g.h["MI_OCT_4"] = "ᴹᴵᴰᴵ\nOct₊₄";
	_g.h["MI_OCT_5"] = "ᴹᴵᴰᴵ\nOct₊₅";
	_g.h["MI_OCT_6"] = "ᴹᴵᴰᴵ\nOct₊₆";
	_g.h["MI_OCT_7"] = "ᴹᴵᴰᴵ\nOct₊₇";
	_g.h["MI_OCTD"] = "ᴹᴵᴰᴵ\nOctᴰᴺ";
	_g.h["MI_OCTU"] = "ᴹᴵᴰᴵ\nOctᵁᴾ";
	_g.h["MI_TRNS_N6"] = "ᴹᴵᴰᴵ\nTrans₋₆";
	_g.h["MI_TRNS_N5"] = "ᴹᴵᴰᴵ\nTrans₋₅";
	_g.h["MI_TRNS_N4"] = "ᴹᴵᴰᴵ\nTrans₋₄";
	_g.h["MI_TRNS_N3"] = "ᴹᴵᴰᴵ\nTrans₋₃";
	_g.h["MI_TRNS_N2"] = "ᴹᴵᴰᴵ\nTrans₋₂";
	_g.h["MI_TRNS_N1"] = "ᴹᴵᴰᴵ\nTrans₋₁";
	_g.h["MI_TRNS_0"] = "ᴹᴵᴰᴵ\nTrans₀";
	_g.h["MI_TRNS_1"] = "ᴹᴵᴰᴵ\nTrans₊₁";
	_g.h["MI_TRNS_2"] = "ᴹᴵᴰᴵ\nTrans₊₂";
	_g.h["MI_TRNS_3"] = "ᴹᴵᴰᴵ\nTrans₊₃";
	_g.h["MI_TRNS_4"] = "ᴹᴵᴰᴵ\nTrans₊₄";
	_g.h["MI_TRNS_5"] = "ᴹᴵᴰᴵ\nTrans₊₅";
	_g.h["MI_TRNS_6"] = "ᴹᴵᴰᴵ\nTrans₊₆";
	_g.h["MI_TRNSD"] = "ᴹᴵᴰᴵ\nTransᴰᴺ";
	_g.h["MI_TRNSU"] = "ᴹᴵᴰᴵ\nTransᵁᴾ";
	_g.h["MI_VEL_1"] = "ᴹᴵᴰᴵ\nVel₁";
	_g.h["MI_VEL_2"] = "ᴹᴵᴰᴵ\nVel₂";
	_g.h["MI_VEL_3"] = "ᴹᴵᴰᴵ\nVel₃";
	_g.h["MI_VEL_4"] = "ᴹᴵᴰᴵ\nVel₄";
	_g.h["MI_VEL_5"] = "ᴹᴵᴰᴵ\nVel₅";
	_g.h["MI_VEL_6"] = "ᴹᴵᴰᴵ\nVel₆";
	_g.h["MI_VEL_7"] = "ᴹᴵᴰᴵ\nVel₇";
	_g.h["MI_VEL_8"] = "ᴹᴵᴰᴵ\nVel₈";
	_g.h["MI_VEL_9"] = "ᴹᴵᴰᴵ\nVel₉";
	_g.h["MI_VEL_10"] = "ᴹᴵᴰᴵ\nVel₁₀";
	_g.h["MI_VELD"] = "ᴹᴵᴰᴵ\nVelᴰᴺ";
	_g.h["MI_VELU"] = "ᴹᴵᴰᴵ\nVelᵁᴾ";
	_g.h["MI_CH1"] = "ᴹᴵᴰᴵ\nCH₁";
	_g.h["MI_CH2"] = "ᴹᴵᴰᴵ\nCH₂";
	_g.h["MI_CH3"] = "ᴹᴵᴰᴵ\nCH₃";
	_g.h["MI_CH4"] = "ᴹᴵᴰᴵ\nCH₄";
	_g.h["MI_CH5"] = "ᴹᴵᴰᴵ\nCH₅";
	_g.h["MI_CH6"] = "ᴹᴵᴰᴵ\nCH₆";
	_g.h["MI_CH7"] = "ᴹᴵᴰᴵ\nCH₇";
	_g.h["MI_CH8"] = "ᴹᴵᴰᴵ\nCH₈";
	_g.h["MI_CH9"] = "ᴹᴵᴰᴵ\nCH₉";
	_g.h["MI_CH10"] = "ᴹᴵᴰᴵ\nCH₁₀";
	_g.h["MI_CH11"] = "ᴹᴵᴰᴵ\nCH₁₁";
	_g.h["MI_CH12"] = "ᴹᴵᴰᴵ\nCH₁₂";
	_g.h["MI_CH13"] = "ᴹᴵᴰᴵ\nCH₁₃";
	_g.h["MI_CH14"] = "ᴹᴵᴰᴵ\nCH₁₄";
	_g.h["MI_CH15"] = "ᴹᴵᴰᴵ\nCH₁₅";
	_g.h["MI_CH16"] = "ᴹᴵᴰᴵ\nCH₁₆";
	_g.h["MI_CHD"] = "ᴹᴵᴰᴵ\nCHᴰᴺ";
	_g.h["MI_CHU"] = "ᴹᴵᴰᴵ\nCHᵁᴾ";
	_g.h["MI_SUS"] = "ᴹᴵᴰᴵ\nSust";
	_g.h["MI_PORT"] = "ᴹᴵᴰᴵ\nPort";
	_g.h["MI_SOST"] = "ᴹᴵᴰᴵ\nSost";
	_g.h["MI_SOFT"] = "ᴹᴵᴰᴵ\nSPedal";
	_g.h["MI_LEG"] = "ᴹᴵᴰᴵ\nLegat";
	_g.h["MI_MOD"] = "ᴹᴵᴰᴵ\nModul";
	_g.h["MI_MODSD"] = "ᴹᴵᴰᴵ\nModulᴰᴺ";
	_g.h["MI_MODSU"] = "ᴹᴵᴰᴵ\nModulᵁᴾ";
	_g.h["MI_BENDD"] = "ᴹᴵᴰᴵ\nBendᴰᴺ";
	_g.h["MI_BENDU"] = "ᴹᴵᴰᴵ\nBendᵁᴾ";
	$r = _g;
	return $r;
}(this));
Main.main();
})({});

//# sourceMappingURL=VialToKeymapDrawer.js.map