// Generated by Haxe 4.3.0
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
var Main = function() { };
Main.__name__ = true;
Main.find = function(id,c) {
	return window.document.getElementById(id);
};
Main.convert = function() {
	var opt = new VilToDrawerOpt();
	Main.fdLog.value = "";
	opt.log = function(level,v) {
		Main.fdLog.value += (Main.fdLog.value.length > 0 ? "\n" : "") + ("[" + level + "] ") + (v == null ? "null" : Std.string(v));
	};
	opt.qmkKeyboard = StringTools.trim(Main.fdKeyboard.value);
	opt.qmkLayout = StringTools.trim(Main.fdLayout.value);
	opt.parseVil(Main.fdVil.value);
	opt.halfAfterHalf = Main.cbHalfAfterHalf.checked;
	opt.mirrorRightHalf = Main.cbMirrorRightHalf.checked;
	opt.omitNonKeys = Std.parseInt(Main.ddOmitNonKeys.value);
	opt.omitM1 = Main.cbOmitM1.checked;
	opt.parseMoveDefs(Main.fdMoveDefs.value);
	opt.parseRangeDefs(Main.fdKeyRanges.value);
	opt.showKeyPos = Main.cbDebugKeyPos.checked;
	opt.parseLayerNames(Main.fdLayerNames.value);
	opt.parseIncludeLayers(Main.fdIncludeLayers.value);
	opt.parseKeyOverrides(Main.fdKeyOverrides.value);
	opt.markNonKeysAs = Main.ddMarkNonKeysAs.value;
	if(opt.markNonKeysAs == "") {
		opt.markNonKeysAs = null;
	}
	try {
		Main.fdOut.value = VilToDrawer.runTxt(opt);
		opt.info("Done!");
	} catch( _g ) {
		var x = haxe_Exception.caught(_g).unwrap();
		$global.console.error("Conversion error:",x);
		opt.error(x);
	}
};
Main.clear = function() {
	var _g = 0;
	var _g1 = Main.fields;
	while(_g < _g1.length) {
		var fd = _g1[_g];
		++_g;
		fd.reset();
	}
};
Main.applySettings = function(root) {
	Main.clear();
	var access = root.fields;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g_value = _g_access[key];
		var _g_key = key;
		var id = _g_key;
		var val = _g_value;
		var _g = [];
		var _g1 = 0;
		var _g2 = Main.fields;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v.id == id) {
				_g.push(v);
			}
		}
		var fd = _g[0];
		if(fd == null) {
			continue;
		}
		fd.set(val);
	}
};
Main.saveSettings = function() {
	var root = { resourceType : "https://yal-tools.github.io/vial-to-keymap-drawer/", fields : { }};
	var _g = 0;
	var _g1 = Main.fields;
	while(_g < _g1.length) {
		var fd = _g1[_g];
		++_g;
		root.fields[fd.id] = fd.get();
	}
	var blob = new Blob([JSON.stringify(root,null,"\t")]);
	window.saveAs(blob,"settings.json","application/json");
};
Main.loadSample = function(name) {
	if(name == null) {
		name = "yal-sofle";
	}
	var sfx = "?t=" + "2023-09-17--02-03-52";
	var rs = new haxe_http_HttpJs("examples/" + name + ".json" + sfx);
	rs.onData = function(s) {
		Main.applySettings(JSON.parse(s));
		var rv = new haxe_http_HttpJs("examples/" + name + ".vil" + sfx);
		rv.onData = function(s) {
			Main.fdVil.value = s;
			Main.convert();
		};
		rv.request();
	};
	rs.request();
};
Main.main = function() {
	var local = window.document.location.hostname == "localhost";
	var _g = 0;
	var _g1 = window.document.querySelectorAll(["main input[id]","main textarea[id]","main select[id]"].join(", "));
	while(_g < _g1.length) {
		var node = _g1[_g];
		++_g;
		var el = node;
		if(el.classList.contains("transient")) {
			continue;
		}
		if(el == Main.fdOut || el == Main.fdVil) {
			continue;
		}
		if(el.tagName == "INPUT") {
			var ei = [el];
			switch(ei[0].type) {
			case "checkbox":
				Main.fields.push({ id : el.id, get : (function(ei) {
					return function() {
						return ei[0].checked;
					};
				})(ei), set : (function(ei) {
					return function(val) {
						ei[0].checked = val;
					};
				})(ei), reset : (function(ei) {
					return function() {
						ei[0].checked = false;
					};
				})(ei)});
				break;
			case "text":
				Main.fields.push({ id : el.id, get : (function(ei) {
					return function() {
						return ei[0].value;
					};
				})(ei), set : (function(ei) {
					return function(val) {
						ei[0].value = val;
					};
				})(ei), reset : (function(ei) {
					return function() {
						ei[0].value = "";
					};
				})(ei)});
				break;
			}
		} else if(el.tagName == "SELECT") {
			var es = [el];
			Main.fields.push({ id : el.id, get : (function(es) {
				return function() {
					return es[0].value;
				};
			})(es), set : (function(es) {
				return function(val) {
					es[0].value = val;
				};
			})(es), reset : (function(es) {
				return function() {
					es[0].selectedIndex = 0;
				};
			})(es)});
		} else {
			var et = [el];
			Main.fields.push({ id : el.id, get : (function(et) {
				return function() {
					if(StringTools.trim(et[0].value) == "") {
						return [];
					}
					return et[0].value.split("\n");
				};
			})(et), set : (function(et) {
				return function(val) {
					if(((val) instanceof Array)) {
						et[0].value = val.join("\n");
					} else {
						et[0].value = val;
					}
				};
			})(et), reset : (function(et) {
				return function() {
					et[0].value = "";
				};
			})(et)});
		}
	}
	Main.ffVil.onchange = function(e) {
		var file = Main.ffVil.files[0];
		if(file == null) {
			return;
		}
		var fileReader = new FileReader();
		fileReader.onloadend = function() {
			Main.fmVil.reset();
		};
		fileReader.onload = function() {
			Main.fdVil.value = fileReader.result;
		};
		fileReader.readAsText(file);
	};
	Main.btClear.onclick = function() {
		if(!window.confirm("Are you sure that you want to clear settings? This cannot be undone!")) {
			return;
		}
		Main.clear();
	};
	Main.ffLoad.onchange = function() {
		var file = Main.ffLoad.files[0];
		if(file == null) {
			return;
		}
		var fileReader = new FileReader();
		fileReader.onloadend = function() {
			Main.fmLoad.reset();
		};
		fileReader.onload = function() {
			try {
				Main.applySettings(new tools_JsonParserWithComments(fileReader.result).doParse());
			} catch( _g ) {
				var x = haxe_Exception.caught(_g).unwrap();
				var v = "Error loading settings: " + Std.string(x);
				window.alert(Std.string(v));
			}
		};
		fileReader.readAsText(file);
	};
	Main.btConvert.onclick = function() {
		Main.convert();
		if(Main.cbCopyAfterConvert.checked) {
			$global.navigator.clipboard.writeText(Main.fdOut.value);
		}
	};
	Main.btSave.onclick = function() {
		Main.saveSettings();
	};
	Main.btLoad.onclick = function() {
		Main.ffLoad.click();
	};
	Main.ddSample.onchange = function() {
		var name = Main.ddSample.value;
		if(name == "") {
			return;
		}
		if(!window.confirm("Are you sure that you want to replace your settings with the example? This cannot be undone!")) {
			Main.ddSample.selectedIndex = 0;
			return;
		}
		Main.ddSample.selectedIndex = 0;
		Main.loadSample(name);
	};
	var kbjs = window.document.createElement("script");
	kbjs.onload = function() {
		var list = window.document.getElementById("qmk_keyboard");
		var _g = 0;
		var _g1 = window.qmk_keyboards;
		while(_g < _g1.length) {
			var kb = _g1[_g];
			++_g;
			var opt = window.document.createElement("option");
			opt.value = kb;
			list.appendChild(opt);
		}
	};
	kbjs.async = true;
	kbjs.src = "qmk_keyboards.js";
	window.document.body.appendChild(kbjs);
	$global.console.info("Hello!");
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxEnums["ValueType"] = { __ename__:true,__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
Type.__name__ = true;
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var VilToDrawer = function() { };
VilToDrawer.__name__ = true;
VilToDrawer.keysToInfos = function(keys,layer,row,ind) {
	var infos = [];
	var _g_current = 0;
	var _g_array = keys;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var i = _g_key;
		var key = _g_value;
		infos.push({ layer : layer, row : row, col : i, ind : ind + i, key : key});
	}
	return infos;
};
VilToDrawer.procViaLayers = function(opt) {
	var vLayers = [];
	var _g_current = 0;
	var _g_array = opt.root.layers;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var l = _g_key;
		var layer = _g_value;
		var keys = [VilToDrawer.keysToInfos(layer,l,0,0)];
		var checkPos = (function(keys) {
			return function(row,col,rule) {
				if(row != 0) {
					opt.warn("Row should be 0 is VIA layouts (found " + row + " in \"" + rule + "\")");
				}
				if(col < 0 || col >= keys[0].length) {
					opt.error("Column " + col + " out of bounds for \"" + rule + "\"");
					return true;
				}
				return false;
			};
		})(keys);
		if(opt.rangeDefs.length > 0) {
			var nkeys = [];
			var _g = 0;
			var _g1 = opt.rangeDefs;
			while(_g < _g1.length) {
				var rdef = _g1[_g];
				++_g;
				if(checkPos(rdef.row,rdef.col,rdef.rule)) {
					continue;
				}
				nkeys = nkeys.concat(keys[0].slice(rdef.col,rdef.col + rdef.count));
			}
			keys[0] = nkeys;
		} else {
			var _g2 = 0;
			var _g3 = opt.moveDefs;
			while(_g2 < _g3.length) {
				var def = _g3[_g2];
				++_g2;
				if(checkPos(def.srcRow,def.srcCol,def.rule)) {
					continue;
				}
				var sub = keys[0].splice(def.srcCol,def.count);
				sub.reverse();
				var _g4 = 0;
				while(_g4 < sub.length) {
					var key = sub[_g4];
					++_g4;
					keys[0].splice(def.dstCol,0,key);
				}
			}
		}
		vLayers.push(keys[0]);
	}
	return vLayers;
};
VilToDrawer.procVialLayers = function(opt) {
	var vLayers = [];
	var _g_current = 0;
	var _g_array = opt.root.layout;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var i = _g_key;
		var layer = _g_value;
		var rows = [[]];
		var infId = 0;
		var _g_current1 = 0;
		var _g_array1 = layer;
		while(_g_current1 < _g_array1.length) {
			var _g_value1 = _g_array1[_g_current1];
			var _g_key1 = _g_current1++;
			var k = _g_key1;
			var row = _g_value1;
			var infos = VilToDrawer.keysToInfos(row,i,k,infId);
			rows[0].push(infos);
			infId += infos.length;
		}
		var checkPos = (function(rows) {
			return function(row,col,rule) {
				if(row < 0 || row >= rows[0].length) {
					opt.error("Row " + row + " out of bounds for \"" + rule + "\"");
					return true;
				}
				if(col < 0 || col >= rows[0][row].length) {
					opt.error("Column " + col + " out of bounds for \"" + rule + "\"");
					return true;
				}
				return false;
			};
		})(rows);
		var _g = 0;
		var _g1 = opt.keyOverrides;
		while(_g < _g1.length) {
			var ko = _g1[_g];
			++_g;
			if(ko.layer == i) {
				if(checkPos(ko.row,ko.col,ko.rule)) {
					continue;
				}
				rows[0][ko.row][ko.col].key = ko.key;
			}
		}
		var keys = [];
		if(opt.rangeDefs.length > 0) {
			var _g2 = 0;
			var _g3 = opt.rangeDefs;
			while(_g2 < _g3.length) {
				var rd = _g3[_g2];
				++_g2;
				if(checkPos(rd.row,rd.col,rd.rule)) {
					continue;
				}
				keys = keys.concat(rows[0][rd.row].slice(rd.col,rd.count));
			}
		} else {
			var _g4 = 0;
			var _g5 = opt.moveDefs;
			while(_g4 < _g5.length) {
				var moveDef = _g5[_g4];
				++_g4;
				if(checkPos(moveDef.srcRow,moveDef.srcCol,moveDef.rule)) {
					continue;
				}
				var sub = rows[0][moveDef.srcRow].splice(moveDef.srcCol,moveDef.count);
				sub.reverse();
				var _g6 = 0;
				while(_g6 < sub.length) {
					var key = sub[_g6];
					++_g6;
					rows[0][moveDef.dstRow].splice(moveDef.dstCol,0,key);
				}
			}
			var rowCount = layer.length;
			var halfRowCount = rowCount >> 1;
			var _g7 = [];
			var _g8 = 0;
			var _g9 = rowCount;
			while(_g8 < _g9) {
				var _ = _g8++;
				_g7.push(null);
			}
			var newRows = _g7;
			var _g_current2 = 0;
			var _g_array2 = rows[0];
			while(_g_current2 < _g_array2.length) {
				var _g_value2 = _g_array2[_g_current2];
				var _g_key2 = _g_current2++;
				var rk = _g_key2;
				var row1 = _g_value2;
				var dk = rk;
				if(opt.halfAfterHalf) {
					if(dk >= halfRowCount) {
						dk = (dk - halfRowCount) * 2 + 1;
						if(opt.mirrorRightHalf) {
							row1.reverse();
						}
					} else {
						dk *= 2;
					}
				}
				newRows[dk] = row1;
			}
			var _g10 = 0;
			while(_g10 < newRows.length) {
				var row2 = newRows[_g10];
				++_g10;
				var _g11 = 0;
				while(_g11 < row2.length) {
					var key1 = row2[_g11];
					++_g11;
					keys.push(key1);
				}
			}
		}
		vLayers.push(keys);
	}
	return vLayers;
};
VilToDrawer.postProcLayers = function(vLayers,opt) {
	var omitNonKeys = opt.omitNonKeys;
	if(omitNonKeys != 0) {
		var k = vLayers[0].length;
		while(--k >= 0) {
			if(vLayers[0][k].key != "KC_NO") {
				continue;
			}
			var isNon = true;
			var _g = 1;
			var _g1 = vLayers.length;
			while(_g < _g1) {
				var l2 = _g++;
				if(omitNonKeys > 0 && l2 >= omitNonKeys) {
					continue;
				}
				if(vLayers[l2][k].key == "KC_NO") {
					continue;
				}
				isNon = false;
				break;
			}
			if(isNon) {
				var _g2 = 0;
				while(_g2 < vLayers.length) {
					var vkeys = vLayers[_g2];
					++_g2;
					vkeys.splice(k,1);
				}
			}
		}
	}
	if(opt.omitM1) {
		var k = vLayers[0].length;
		while(--k >= 0) {
			if(!vial_VialKey.isM1(vLayers[0][k].key)) {
				continue;
			}
			var isM1 = true;
			var _g = 0;
			var _g1 = vLayers.length;
			while(_g < _g1) {
				var l = _g++;
				if(vial_VialKey.isM1(vLayers[l][k].key)) {
					continue;
				}
				isM1 = false;
				break;
			}
			if(!isM1) {
				continue;
			}
			var _g2 = 0;
			var _g3 = vLayers.length;
			while(_g2 < _g3) {
				var l1 = _g2++;
				vLayers[l1].splice(k,1);
			}
		}
	}
};
VilToDrawer.run = function(opt) {
	var vkm = opt.root;
	var isVial = !opt.isVIA;
	var vLayers = isVial ? VilToDrawer.procVialLayers(opt) : VilToDrawer.procViaLayers(opt);
	VilToDrawer.postProcLayers(vLayers,opt);
	var dkLayers = { };
	var dkLayerList = [];
	var layerNames = [];
	var _g_current = 0;
	var _g_array = vLayers;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var li = _g_key;
		var vkeys = _g_value;
		if(opt.includeLayers.length > 0 && opt.includeLayers.indexOf(li) == -1) {
			continue;
		}
		var dkeys = [];
		var _g_current1 = 0;
		var _g_array1 = vkeys;
		while(_g_current1 < _g_array1.length) {
			var _g_value1 = _g_array1[_g_current1];
			var _g_key1 = _g_current1++;
			var k = _g_key1;
			var kc = _g_value1;
			var dk = vial_VialKey.toDrawerKey(kc.key,opt);
			var mo = "MO(" + li + ")";
			var lts = "LT" + li + "(";
			var held = false;
			var _g = 0;
			while(_g < vLayers.length) {
				var vkeys2 = vLayers[_g];
				++_g;
				if(vkeys == vkeys2) {
					continue;
				}
				var kc2 = vkeys2[k].key;
				if(kc2 == null) {
					continue;
				}
				if(kc2 == mo || StringTools.startsWith(kc2,lts)) {
					held = true;
					break;
				}
			}
			if(held) {
				var dkx = drawer_DrawerKey.toExt(dk);
				dkx.type = "held";
				if(dkx.t == vial_VialKeyNames.map.h["KC_TRNS"]) {
					dkx.t = "";
				}
				dk = dkx;
			}
			if(opt.showKeyPos) {
				var dkx1 = drawer_DrawerKey.toExt(dk);
				dkx1.s = kc.row + "," + kc.col;
				dk = dkx1;
			}
			dkeys.push(dk);
		}
		var ln = opt.getLayerName(li,true);
		dkLayers[ln] = dkeys;
		dkLayerList.push(dkeys);
		layerNames.push(ln);
	}
	var extraStyle = [];
	if(opt.markNonKeysAs != null) {
		var found = false;
		var trns = vial_VialKeyNames.map.h["KC_TRNS"];
		var isNon = function(dk) {
			if(dk != null) {
				return dk == trns;
			} else {
				return true;
			}
		};
		var _g = 0;
		var _g1 = dkLayerList[0].length;
		while(_g < _g1) {
			var k = _g++;
			if(!isNon(dkLayerList[0][k])) {
				continue;
			}
			var _g2 = [];
			var _g3 = 0;
			var _g4 = dkLayerList;
			while(_g3 < _g4.length) {
				var v = _g4[_g3];
				++_g3;
				if(!isNon(v[k])) {
					_g2.push(v);
				}
			}
			if(_g2.length != 0) {
				continue;
			}
			var _g5 = 0;
			while(_g5 < dkLayerList.length) {
				var dkeys = dkLayerList[_g5];
				++_g5;
				var dk = drawer_DrawerKey.toExt(dkeys[k]);
				dk.t = "";
				dk.type = opt.markNonKeysAs;
				dkeys[k] = dk;
				found = true;
			}
		}
		if(found) {
			switch(opt.markNonKeysAs) {
			case "hidden":
				extraStyle = extraStyle.concat(["rect.hidden, rect.combo.hidden {","\t" + "fill: transparent;","\t" + "stroke-width: 0;","}"]);
				break;
			case "unused":
				extraStyle = extraStyle.concat(["rect.unused, rect.combo.unused {","\t" + "fill: transparent;","\t" + "stroke-dasharray: 4, 6;","\t" + "stroke-width: 2;","}"]);
				break;
			}
		}
	}
	var dCombos = [];
	if(vkm.combo != null) {
		var _g = 0;
		var _g1 = vkm.combo;
		while(_g < _g1.length) {
			var vCombo = _g1[_g];
			++_g;
			var iResult = vCombo.length - 1;
			var inKeys = [];
			var _g2 = 0;
			var _g3 = iResult;
			while(_g2 < _g3) {
				var i = _g2++;
				if(vial_VialKey.isValid(vCombo[i])) {
					inKeys.push(vCombo[i]);
				}
			}
			if(inKeys.length < 2) {
				continue;
			}
			var cResult = vCombo[iResult];
			if(!vial_VialKey.isValid(cResult)) {
				continue;
			}
			var _g_current = 0;
			var _g_array = vLayers;
			while(_g_current < _g_array.length) {
				var _g_value = _g_array[_g_current];
				var _g_key = _g_current++;
				var li = _g_key;
				var vKeys = _g_value;
				var keyPos = [];
				var _g4 = 0;
				while(_g4 < inKeys.length) {
					var key = inKeys[_g4];
					++_g4;
					var kp = -1;
					var _g_current1 = 0;
					var _g_array1 = vKeys;
					while(_g_current1 < _g_array1.length) {
						var _g_value1 = _g_array1[_g_current1];
						var _g_key1 = _g_current1++;
						var kid = _g_key1;
						var ki = _g_value1;
						if(ki.key == key) {
							kp = kid;
							break;
						}
					}
					if(kp >= 0) {
						keyPos.push(kp);
					} else {
						break;
					}
				}
				if(keyPos.length < inKeys.length) {
					continue;
				}
				dCombos.push({ p : keyPos, k : vial_VialKey.toDrawerKey(cResult,opt), l : [opt.getLayerName(li,true)]});
			}
		}
	}
	var dkm = { layout : { qmk_keyboard : opt.qmkKeyboard}, layers : dkLayers, combos : dCombos};
	if(extraStyle.length > 0) {
		dkm.draw_config = { svg_extra_style : extraStyle.join("\n")};
	}
	if(opt.qmkLayout != null && opt.qmkLayout != "") {
		dkm.layout.qmk_layout = opt.qmkLayout;
	}
	return dkm;
};
VilToDrawer.runTxt = function(opt) {
	var dkm = VilToDrawer.run(opt);
	return JSON.stringify(dkm,null,"  ");
};
var VilToDrawerOpt = function() {
	this.showKeyPos = false;
	this.keyOverrides = [];
	this.rangeDefs = [];
	this.moveDefs = [];
	this.layerNames = [];
	this.includeLayers = [];
	this.omitM1 = false;
	this.markNonKeysAs = null;
	this.omitNonKeys = 0;
	this.mirrorRightHalf = false;
	this.halfAfterHalf = false;
	this.qmkLayout = null;
	this.qmkKeyboard = null;
};
VilToDrawerOpt.__name__ = true;
VilToDrawerOpt.prototype = {
	root: null
	,isVIA: null
	,qmkKeyboard: null
	,qmkLayout: null
	,halfAfterHalf: null
	,mirrorRightHalf: null
	,omitNonKeys: null
	,markNonKeysAs: null
	,omitM1: null
	,includeLayers: null
	,layerNames: null
	,moveDefs: null
	,rangeDefs: null
	,keyOverrides: null
	,showKeyPos: null
	,log: function(level,v) {
		haxe_Log.trace("[" + level + "]",{ fileName : "src/VilToDrawerOpt.hx", lineNumber : 34, className : "VilToDrawerOpt", methodName : "log", customParams : [v == null ? "null" : Std.string(v)]});
	}
	,info: function(v) {
		this.log("info",v);
	}
	,warn: function(v) {
		this.log("warn",v);
	}
	,error: function(v) {
		this.log("error",v);
	}
	,getLayerName: function(i,long) {
		if(i < this.layerNames.length) {
			var l = this.layerNames[i];
			if(long) {
				return l.long;
			} else {
				return l.short;
			}
		} else {
			return "L" + i;
		}
	}
	,parseVil: function(txt) {
		this.root = JSON.parse(txt);
		this.isVIA = this.root.layers != null;
	}
	,parseLayerNames: function(txt) {
		txt = StringTools.trim(StringTools.replace(txt,"\r",""));
		if(txt == "") {
			return;
		}
		var rx = VilToDrawerOpt.rxLayerShortLong;
		var _g = 0;
		var _g1 = txt.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			line = StringTools.trim(line);
			if(rx.match(line)) {
				this.layerNames.push({ short : rx.matched(1), long : rx.matched(0)});
			} else if(line.length <= 6) {
				this.layerNames.push({ short : line, long : line});
			} else {
				var lis = "L" + this.layerNames.length;
				this.layerNames.push({ short : lis, long : lis + ": " + line});
			}
		}
	}
	,parseMoveDefs: function(txt) {
		var _gthis = this;
		tools_ERegTools.each(VilToDrawerOpt.rxMoveDef,txt,function(rx) {
			var srcCol = Std.parseInt(rx.matched(2));
			var ns = rx.matched(3);
			var n;
			if(ns != null) {
				n = Std.parseInt(ns);
			} else {
				ns = rx.matched(4);
				if(ns != null) {
					n = Std.parseInt(ns) + 1 - srcCol;
				} else {
					n = 1;
				}
			}
			var at = 5;
			_gthis.moveDefs.push({ srcRow : Std.parseInt(rx.matched(1)), srcCol : srcCol, count : n, dstRow : Std.parseInt(rx.matched(at)), dstCol : Std.parseInt(rx.matched(at + 1)), rule : rx.matched(0)});
		});
	}
	,parseRangeDefs: function(txt) {
		var _gthis = this;
		tools_ERegTools.each(VilToDrawerOpt.rxRangeDef,txt,function(rx) {
			var col = Std.parseInt(rx.matched(2));
			var tillStr = rx.matched(3);
			var count;
			if(tillStr != null) {
				var till = Std.parseInt(rx.matched(3));
				count = till + 1 - col;
			} else {
				count = 1;
			}
			_gthis.rangeDefs.push({ row : Std.parseInt(rx.matched(1)), col : col, count : count, rule : rx.matched(0)});
		});
	}
	,parseIncludeLayers: function(txt) {
		var _gthis = this;
		tools_ERegTools.each(new EReg("\\d+","g"),txt,function(rx) {
			var s = rx.matched(0);
			var i = Std.parseInt(s);
			if(i == null) {
				_gthis.error("\"" + s + "\" is not a valid layer number");
			} else {
				_gthis.includeLayers.push(i);
			}
		});
	}
	,parseKeyOverrides: function(txt) {
		var _gthis = this;
		tools_ERegTools.each(VilToDrawerOpt.rxKeyOverride,txt,function(rx) {
			_gthis.keyOverrides.push({ layer : Std.parseInt(rx.matched(1)), row : Std.parseInt(rx.matched(2)), col : Std.parseInt(rx.matched(3)), key : rx.matched(4), rule : rx.matched(0)});
		});
	}
	,__class__: VilToDrawerOpt
};
var drawer_DrawerKey = {};
drawer_DrawerKey.isFlat = function(this1) {
	if(this1 != null) {
		return typeof(this1) == "string";
	} else {
		return true;
	}
};
drawer_DrawerKey.toExt = function(this1) {
	if(this1 == null) {
		return { t : ""};
	}
	if(drawer_DrawerKey.isFlat(this1)) {
		return { t : this1};
	} else {
		return this1;
	}
};
drawer_DrawerKey.toFlat = function(this1,a) {
	if(drawer_DrawerKey.isFlat(this1)) {
		return this1;
	}
	return Reflect.field(this1,a);
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	h: null
	,__class__: haxe_ds_StringMap
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = true;
haxe_http_HttpBase.prototype = {
	url: null
	,responseBytes: null
	,responseAsString: null
	,postData: null
	,postBytes: null
	,headers: null
	,params: null
	,emptyOnData: null
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return $bind(this,this.onData) != this.emptyOnData;
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpJs.__name__ = true;
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	async: null
	,withCredentials: null
	,responseHeaders: null
	,req: null
	,request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		this.responseHeaders = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && js_Browser.get_supported() && $global.location != null) {
				var protocol = $global.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var headers = r.getAllResponseHeaders().split("\r\n");
				var _g = [];
				var _g1 = 0;
				var _g2 = headers;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v != "") {
						_g.push(v);
					}
				}
				headers = _g;
				var onreadystatechange = new haxe_ds_StringMap();
				_gthis.responseHeaders = onreadystatechange;
				var _g = 0;
				while(_g < headers.length) {
					var hline = headers[_g];
					++_g;
					var a = hline.split(": ");
					var hname = a.shift();
					var hval = a.length == 1 ? a[0] : a.join(": ");
					hval = StringTools.ltrim(StringTools.rtrim(hval));
					_gthis.responseHeaders.h[hname] = hval;
				}
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postData;
		var _g1 = this.postBytes;
		if(_g == null) {
			if(_g1 == null) {
				uri = null;
			} else {
				var bytes = _g1;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g1 == null) {
			var str = _g;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				var s = p.name;
				var uri1 = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri = uri1 + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
var tools_BuildDate = function() { };
tools_BuildDate.__name__ = true;
var tools_ERegTools = function() { };
tools_ERegTools.__name__ = true;
tools_ERegTools.escapeRx = function(s) {
	return s.replace(tools_ERegTools.escapeRx_1.r,"\\$1");
};
tools_ERegTools.each = function(r,s,f) {
	var i = 0;
	while(r.matchSub(s,i)) {
		var p = r.matchedPos();
		f(r);
		i = p.pos + p.len;
	}
};
var tools_JsonParserWithComments = function(str) {
	this.str = str;
	this.pos = 0;
};
tools_JsonParserWithComments.__name__ = true;
tools_JsonParserWithComments.parse = function(str) {
	return new tools_JsonParserWithComments(str).doParse();
};
tools_JsonParserWithComments.prototype = {
	str: null
	,pos: null
	,doParse: function() {
		var result = this.parseRec();
		var c;
		while(true) {
			c = this.str.charCodeAt(this.pos++);
			var c1 = c;
			if(!(c1 == c1)) {
				break;
			}
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				this.invalidChar();
			}
		}
		return result;
	}
	,parseRec: function() {
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:case 39:
				return this.parseString(c);
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var c1 = c;
				var start = this.pos - 1;
				var minus = c1 == 45;
				var digit = !minus;
				var zero = c1 == 48;
				var point = false;
				var e = false;
				var pm = false;
				var end = false;
				do {
					c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point || e) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
				} while(!end);
				var f = parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
				if(point) {
					return f;
				} else {
					var i = f | 0;
					if(i == f) {
						return i;
					} else {
						return f;
					}
				}
				break;
			case 47:
				if(this.str.charCodeAt(this.pos) == 47) {
					this.pos++;
					while(this.pos < this.str.length) {
						c = this.str.charCodeAt(this.pos);
						if(c == 13 || c == 10) {
							break;
						} else {
							this.pos++;
						}
					}
				} else if(this.str.charCodeAt(this.pos) == 42) {
					this.pos++;
					while(this.pos < this.str.length) {
						c = this.str.charCodeAt(this.pos);
						var tmp;
						if(c == 42) {
							var offset = 1;
							if(offset == null) {
								offset = 0;
							}
							tmp = this.str.charCodeAt(this.pos + offset) == 47;
						} else {
							tmp = false;
						}
						if(tmp) {
							this.pos += 2;
							break;
						} else {
							this.pos += 1;
						}
					}
				} else {
					this.invalidChar();
				}
				break;
			case 91:
				var arr = [];
				var comma = null;
				while(true) {
					var c2 = this.str.charCodeAt(this.pos++);
					switch(c2) {
					case 9:case 10:case 13:case 32:
						break;
					case 44:
						if(comma) {
							comma = false;
						} else {
							this.invalidChar();
						}
						break;
					case 93:
						return arr;
					default:
						if(comma) {
							this.invalidChar();
						}
						this.pos--;
						arr.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 102:
				var save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 97 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 115 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				var save1 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 108) {
					this.pos = save1;
					this.invalidChar();
				}
				return null;
			case 116:
				var save2 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 114 || this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save2;
					this.invalidChar();
				}
				return true;
			case 123:
				var obj = { };
				var field = null;
				var comma1 = null;
				while(true) {
					var c3 = this.str.charCodeAt(this.pos++);
					switch(c3) {
					case 9:case 10:case 13:case 32:
						break;
					case 34:
						if(field != null || comma1) {
							this.invalidChar();
						}
						field = this.parseString();
						break;
					case 44:
						if(comma1) {
							comma1 = false;
						} else {
							this.invalidChar();
						}
						break;
					case 58:
						if(field == null) {
							this.invalidChar();
						}
						obj[field] = this.parseRec();
						field = null;
						comma1 = true;
						break;
					case 125:
						if(field != null) {
							this.invalidChar();
						}
						return obj;
					default:
						if(c3 == 95 || c3 >= 97 && c3 <= 122 || c3 >= 65 && c3 <= 90) {
							if(field != null || comma1) {
								this.invalidChar();
							}
							var start1 = this.pos - 1;
							while(this.pos < this.str.length) {
								c3 = this.str.charCodeAt(this.pos);
								if(c3 == 95 || c3 >= 97 && c3 <= 122 || c3 >= 65 && c3 <= 90 || c3 >= 48 && c3 <= 57) {
									this.pos++;
								} else {
									break;
								}
							}
							field = this.str.substring(start1,this.pos);
						} else {
							this.invalidChar();
						}
					}
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function(quoteChar) {
		if(quoteChar == null) {
			quoteChar = 34;
		}
		var start = this.pos;
		var buf = null;
		var prev = -1;
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			if(c == quoteChar) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				var s = this.str;
				var len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.str.charCodeAt(this.pos++);
				if(c != 117 && prev != -1) {
					buf.b += String.fromCodePoint(65533);
					prev = -1;
				}
				switch(c) {
				case 34:case 39:case 47:case 92:
					buf.b += String.fromCodePoint(c);
					break;
				case 98:
					buf.b += String.fromCodePoint(8);
					break;
				case 102:
					buf.b += String.fromCodePoint(12);
					break;
				case 110:
					buf.b += String.fromCodePoint(10);
					break;
				case 114:
					buf.b += String.fromCodePoint(13);
					break;
				case 116:
					buf.b += String.fromCodePoint(9);
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					if(prev != -1) {
						if(uc < 56320 || uc > 57343) {
							buf.b += String.fromCodePoint(65533);
							prev = -1;
						} else {
							buf.b += String.fromCodePoint(((prev - 55296 << 10) + (uc - 56320) + 65536));
							prev = -1;
						}
					} else if(uc >= 55296 && uc <= 56319) {
						prev = uc;
					} else {
						buf.b += String.fromCodePoint(uc);
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid escape sequence \\" + String.fromCodePoint(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if(c != c) {
				throw haxe_Exception.thrown("Unclosed string");
			}
		}
		if(prev != -1) {
			buf.b += String.fromCodePoint(65533);
			prev = -1;
		}
		if(buf == null) {
			return HxOverrides.substr(this.str,start,this.pos - start - 1);
		} else {
			var s = this.str;
			var len = this.pos - start - 1;
			buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
			return buf.b;
		}
	}
	,parseNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		do {
			c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 43:case 45:
				if(!e || pm) {
					this.invalidNumber(start);
				}
				digit = false;
				pm = true;
				break;
			case 46:
				if(minus || point || e) {
					this.invalidNumber(start);
				}
				digit = false;
				point = true;
				break;
			case 48:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
				}
				digit = true;
				zero = false;
				break;
			case 69:case 101:
				if(minus || zero || e) {
					this.invalidNumber(start);
				}
				digit = false;
				e = true;
				break;
			default:
				if(!digit) {
					this.invalidNumber(start);
				}
				this.pos--;
				end = true;
			}
		} while(!end);
		var f = parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
		if(point) {
			return f;
		} else {
			var i = f | 0;
			if(i == f) {
				return i;
			} else {
				return f;
			}
		}
	}
	,nextChar: function() {
		return this.str.charCodeAt(this.pos++);
	}
	,peekChar: function(offset) {
		if(offset == null) {
			offset = 0;
		}
		return this.str.charCodeAt(this.pos + offset);
	}
	,invalidChar: function() {
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos);
	}
	,invalidNumber: function(start) {
		throw haxe_Exception.thrown("Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start));
	}
	,__class__: tools_JsonParserWithComments
};
var tools_JsonPrinterWithOrder = function(replacer,space) {
	this.replacer = replacer;
	this.indent = space;
	this.pretty = space != null;
	this.nind = 0;
	this.buf = new StringBuf();
};
tools_JsonPrinterWithOrder.__name__ = true;
tools_JsonPrinterWithOrder.print = function(o,replacer,space) {
	var printer = new tools_JsonPrinterWithOrder(replacer,space);
	printer.write("",o);
	return printer.buf.b;
};
tools_JsonPrinterWithOrder.prototype = {
	buf: null
	,replacer: null
	,indent: null
	,pretty: null
	,nind: null
	,ipad: function() {
		if(this.pretty) {
			var v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
			this.buf.b += Std.string(v);
		}
	}
	,newl: function() {
		if(this.pretty) {
			this.buf.b += String.fromCodePoint(10);
		}
	}
	,write: function(k,v) {
		if(this.replacer != null) {
			v = this.replacer(k,v);
		}
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "null";
			break;
		case 1:
			this.buf.b += Std.string(v);
			break;
		case 2:
			var v1 = isFinite(v) ? Std.string(v) : "null";
			this.buf.b += Std.string(v1);
			break;
		case 3:
			this.buf.b += Std.string(v);
			break;
		case 4:
			var fields = Reflect.fields(v);
			if(HxOverrides.remove(fields,"__hxOrder__")) {
				fields = Reflect.field(v,"__hxOrder__");
			}
			this.fieldsString(v,fields);
			break;
		case 5:
			this.buf.b += "\"<fun>\"";
			break;
		case 6:
			var c = _g.c;
			if(c == String) {
				this.quote(v);
			} else if(c == Array) {
				var v1 = v;
				this.buf.b += String.fromCodePoint(91);
				var len = v1.length;
				var last = len - 1;
				var _g1 = 0;
				var _g2 = len;
				while(_g1 < _g2) {
					var i = _g1++;
					if(i > 0) {
						this.buf.b += String.fromCodePoint(44);
					} else {
						this.nind++;
					}
					if(this.pretty) {
						this.buf.b += String.fromCodePoint(10);
					}
					if(this.pretty) {
						var v2 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
						this.buf.b += Std.string(v2);
					}
					this.write(i,v1[i]);
					if(i == last) {
						this.nind--;
						if(this.pretty) {
							this.buf.b += String.fromCodePoint(10);
						}
						if(this.pretty) {
							var v3 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
							this.buf.b += Std.string(v3);
						}
					}
				}
				this.buf.b += String.fromCodePoint(93);
			} else if(c == haxe_ds_StringMap) {
				var v1 = v;
				var o = { };
				var h = v1.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var k = _g_keys[_g_current++];
					o[k] = v1.h[k];
				}
				var v1 = o;
				var fields = Reflect.fields(v1);
				if(HxOverrides.remove(fields,"__hxOrder__")) {
					fields = Reflect.field(v1,"__hxOrder__");
				}
				this.fieldsString(v1,fields);
			} else if(c == Date) {
				var v1 = v;
				this.quote(HxOverrides.dateStr(v1));
			} else {
				this.classString(v);
			}
			break;
		case 7:
			var _g1 = _g.e;
			var i = v._hx_index;
			this.buf.b += Std.string(i == null ? "null" : "" + i);
			break;
		case 8:
			this.buf.b += "\"???\"";
			break;
		}
	}
	,classString: function(v) {
		this.fieldsString(v,Type.getInstanceFields(js_Boot.getClass(v)));
	}
	,objString: function(v) {
		var fields = Reflect.fields(v);
		if(HxOverrides.remove(fields,"__hxOrder__")) {
			fields = Reflect.field(v,"__hxOrder__");
		}
		this.fieldsString(v,fields);
	}
	,fieldsString: function(v,fields) {
		this.buf.b += String.fromCodePoint(123);
		var len = fields.length;
		var last = len - 1;
		var first = true;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var f = fields[i];
			var value = Reflect.field(v,f);
			if(Reflect.isFunction(value)) {
				continue;
			}
			if(first) {
				this.nind++;
				first = false;
			} else {
				this.buf.b += String.fromCodePoint(44);
			}
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(10);
			}
			if(this.pretty) {
				var v1 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
				this.buf.b += Std.string(v1);
			}
			this.quote(f);
			this.buf.b += String.fromCodePoint(58);
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(32);
			}
			this.write(f,value);
			if(i == last) {
				this.nind--;
				if(this.pretty) {
					this.buf.b += String.fromCodePoint(10);
				}
				if(this.pretty) {
					var v2 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
					this.buf.b += Std.string(v2);
				}
			}
		}
		this.buf.b += String.fromCodePoint(125);
	}
	,quote: function(s) {
		this.buf.b += String.fromCodePoint(34);
		var i = 0;
		var length = s.length;
		while(i < length) {
			var c = s.charCodeAt(i++);
			switch(c) {
			case 8:
				this.buf.b += "\\b";
				break;
			case 9:
				this.buf.b += "\\t";
				break;
			case 10:
				this.buf.b += "\\n";
				break;
			case 12:
				this.buf.b += "\\f";
				break;
			case 13:
				this.buf.b += "\\r";
				break;
			case 34:
				this.buf.b += "\\\"";
				break;
			case 92:
				this.buf.b += "\\\\";
				break;
			default:
				this.buf.b += String.fromCodePoint(c);
			}
		}
		this.buf.b += String.fromCodePoint(34);
	}
	,__class__: tools_JsonPrinterWithOrder
};
var via_ViaKeyNames = function() { };
via_ViaKeyNames.__name__ = true;
var vial_VialKey = {};
vial_VialKey.toDrawerKey = function(this1,opt,oneLine) {
	if(oneLine == null) {
		oneLine = false;
	}
	var kc = this1;
	if(kc == null || kc == "" || kc == "KC_NO") {
		return null;
	}
	if(vial_VialKey.toDrawerKey_rx_modTap.match(kc)) {
		var key = vial_VialKey.toDrawerKey_rx_modTap.matched(1);
		var t = vial_VialKey.toDrawerKey_rx_modTap.matched(2);
		var dk = drawer_DrawerKey.toExt(vial_VialKey.toDrawerKey(t,opt));
		dk.h = key;
		return dk;
	}
	if(vial_VialKey.toDrawerKey_rx_layer.match(kc)) {
		var li = Std.parseInt(vial_VialKey.toDrawerKey_rx_layer.matched(2));
		return vial_VialKey.toDrawerKey_rx_layer.matched(1) + " " + opt.getLayerName(li,false);
	}
	if(vial_VialKey.toDrawerKey_rx_td.match(kc)) {
		var ti = Std.parseInt(vial_VialKey.toDrawerKey_rx_td.matched(1));
		var td = opt.root.tap_dance[ti];
		if(td != null) {
			return { s : kc, t : drawer_DrawerKey.toFlat(vial_VialKey.toDrawerKey(td[0],opt,true),"t"), h : drawer_DrawerKey.toFlat(vial_VialKey.toDrawerKey(td[1],opt,true),"t")};
		}
	}
	if(vial_VialKey.toDrawerKey_rx_lt.match(kc)) {
		var t = vial_VialKey.toDrawerKey_rx_lt.matched(3);
		var tmp = vial_VialKey.toDrawerKey_rx_lt.matched(1);
		var lts = tmp != null ? tmp : vial_VialKey.toDrawerKey_rx_lt.matched(2);
		var h = "MO(" + lts + ")";
		var dk = drawer_DrawerKey.toExt(vial_VialKey.toDrawerKey(t,opt));
		dk.h = drawer_DrawerKey.toFlat(vial_VialKey.toDrawerKey(h,opt),"t");
		return dk;
	}
	if(vial_VialKey.toDrawerKey_rx_shift.match(kc)) {
		var shift = vial_VialKey.toDrawerKey_rx_shift.matched(1) + "+";
		var key = vial_VialKey.toDrawerKey_rx_shift.matched(2);
		var dk = drawer_DrawerKey.toExt(vial_VialKey.toDrawerKey(key,opt));
		if(dk.s != null) {
			dk.t = dk.s;
		}
		dk.s = shift;
		return dk;
	}
	if(vial_VialKey.toDrawerKey_rx_pair.match(kc)) {
		var f = vial_VialKey.toDrawerKey_rx_pair.matched(1);
		switch(f) {
		case "A":
			f = "Alt";
			break;
		case "C":
			f = "Ctrl";
			break;
		case "G":
			f = "Gui";
			break;
		case "S":
			f = "Shift";
			break;
		}
		var k = vial_VialKey.toDrawerKey_rx_pair.matched(2);
		var dk = drawer_DrawerKey.toExt(vial_VialKey.toDrawerKey(k,opt));
		if(dk.s != null) {
			dk.t = dk.s + "\n" + dk.t;
		}
		dk.s = f + "+";
		return dk;
	}
	if(vial_VialKey.toDrawerKey_rx_json.match(kc)) {
		try {
			return new tools_JsonParserWithComments(kc).doParse();
		} catch( _g ) {
			var x = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace("Error parsing JSON \"" + kc + "\":",{ fileName : "src/vial/VialKey.hx", lineNumber : 110, className : "vial._VialKey.VialKey_Impl_", methodName : "toDrawerKey", customParams : [x]});
			return kc;
		}
	}
	var fullName = opt.isVIA ? via_ViaKeyNames.map.h[kc] : vial_VialKeyNames.map.h[kc];
	if(fullName != null) {
		if(oneLine) {
			return StringTools.replace(fullName,"\n","  ");
		}
		if(Object.prototype.hasOwnProperty.call(vial_VialKeysWithShiftState.map.h,kc)) {
			var parts = fullName.split("\n");
			if(parts.length > 1) {
				return { s : parts[0], t : parts[1]};
			}
		}
		return fullName;
	}
	if(StringTools.startsWith(kc,"KC_")) {
		return HxOverrides.substr(kc,3,null);
	}
	return kc;
};
vial_VialKey.isValid = function(this1) {
	if(typeof(this1) == "number" && this1 == -1) {
		return false;
	}
	if(this1 == null) {
		return false;
	} else {
		switch(this1) {
		case "":case "KC_NO":
			return false;
		default:
			return true;
		}
	}
};
vial_VialKey.isM1 = function(this1) {
	if(typeof(this1) == "number") {
		return this1 == -1;
	} else {
		return false;
	}
};
var vial_VialKeyNames = function() { };
vial_VialKeyNames.__name__ = true;
var vial_VialKeymapTapDance = {};
vial_VialKeymapTapDance.get_tap = function(this1) {
	return this1[0];
};
vial_VialKeymapTapDance.set_tap = function(this1,k) {
	return this1[0] = k;
};
vial_VialKeymapTapDance.get_hold = function(this1) {
	return this1[1];
};
vial_VialKeymapTapDance.set_hold = function(this1,k) {
	return this1[1] = k;
};
vial_VialKeymapTapDance.get_doubleTap = function(this1) {
	return this1[2];
};
vial_VialKeymapTapDance.set_doubleTap = function(this1,k) {
	return this1[2] = k;
};
vial_VialKeymapTapDance.get_tapHold = function(this1) {
	return this1[3];
};
vial_VialKeymapTapDance.set_tapHold = function(this1,k) {
	return this1[3] = k;
};
vial_VialKeymapTapDance.get_tapTerm = function(this1) {
	return this1[4];
};
vial_VialKeymapTapDance.set_tapTerm = function(this1,t) {
	return this1[4] = t;
};
var vial_VialKeysWithShiftState = function() { };
vial_VialKeysWithShiftState.__name__ = true;
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
Main.buildDate = "2023-09-17--02-03-52";
Main.fdVil = window.document.getElementById("vil");
Main.fdOut = window.document.getElementById("out");
Main.fdLog = window.document.getElementById("log");
Main.fmVil = window.document.getElementById("vil-form");
Main.ffVil = window.document.getElementById("vil-picker");
Main.cbHalfAfterHalf = window.document.getElementById("half-after-half");
Main.cbMirrorRightHalf = window.document.getElementById("mirror-right-half");
Main.cbDebugKeyPos = window.document.getElementById("show-key-pos");
Main.ddOmitNonKeys = window.document.getElementById("omit-non-keys");
Main.ddMarkNonKeysAs = window.document.getElementById("mark-non-keys");
Main.cbOmitM1 = window.document.getElementById("omit-m1");
Main.fdKeyboard = window.document.getElementById("keyboard");
Main.fdLayout = window.document.getElementById("layout");
Main.fdMoveDefs = window.document.getElementById("move-defs");
Main.fdKeyRanges = window.document.getElementById("key-ranges");
Main.fdLayerNames = window.document.getElementById("layer-names");
Main.fdIncludeLayers = window.document.getElementById("include-layers");
Main.fdKeyOverrides = window.document.getElementById("key-overrides");
Main.btConvert = window.document.getElementById("convert");
Main.cbCopyAfterConvert = window.document.getElementById("copy-after-convert");
Main.ddSample = window.document.getElementById("sample");
Main.btLoad = window.document.getElementById("load-settings");
Main.btSave = window.document.getElementById("save-settings");
Main.btClear = window.document.getElementById("clear");
Main.fmLoad = window.document.getElementById("load-form");
Main.ffLoad = window.document.getElementById("load-picker");
Main.fields = [];
VilToDrawer.needsHxOrder = false;
VilToDrawerOpt.rxLayerShortLong = new EReg("^(\\S{1,6})(?::.*|\\s+\\(.*\\))$","");
VilToDrawerOpt.rxMoveDef = new EReg("^\\s*" + "(\\d+),\\s*" + "(\\d+)\\s*" + "(?:" + "\\[\\s*" + "(\\d+)" + "\\s*\\]\\s*" + "|" + "\\-\\s*" + "(\\d+)" + "\\s*" + ")?" + "=>\\s*" + "(\\d+),\\s*" + "(\\d+)" + "\\s*$","gm");
VilToDrawerOpt.rxRangeDef = new EReg("^\\s*" + "(\\d+),\\s*" + "(\\d+)\\s*" + "(?:" + "\\-\\s*" + "(\\d+)" + "\\s*" + ")?" + "^","gm");
VilToDrawerOpt.rxKeyOverride = new EReg("^\\s*(\\d+),\\s*(\\d+),\\s*(\\d+)\\s*=>\\s*(.+)","gm");
tools_ERegTools.escapeRx_1 = new EReg("([.*+?^${}()|[\\]\\/\\\\])","g");
via_ViaKeyNames.map = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["KC_NO"] = "";
	_g.h["KC_TRNS"] = "▽";
	_g.h["KC_ESC"] = "Esc";
	_g.h["KC_A"] = "A";
	_g.h["KC_B"] = "B";
	_g.h["KC_C"] = "C";
	_g.h["KC_D"] = "D";
	_g.h["KC_E"] = "E";
	_g.h["KC_F"] = "F";
	_g.h["KC_G"] = "G";
	_g.h["KC_H"] = "H";
	_g.h["KC_I"] = "I";
	_g.h["KC_J"] = "J";
	_g.h["KC_K"] = "K";
	_g.h["KC_L"] = "L";
	_g.h["KC_M"] = "M";
	_g.h["KC_N"] = "N";
	_g.h["KC_O"] = "O";
	_g.h["KC_P"] = "P";
	_g.h["KC_Q"] = "Q";
	_g.h["KC_R"] = "R";
	_g.h["KC_S"] = "S";
	_g.h["KC_T"] = "T";
	_g.h["KC_U"] = "U";
	_g.h["KC_V"] = "V";
	_g.h["KC_W"] = "W";
	_g.h["KC_X"] = "X";
	_g.h["KC_Y"] = "Y";
	_g.h["KC_Z"] = "Z";
	_g.h["KC_1"] = "!\n1";
	_g.h["KC_2"] = "@\n2";
	_g.h["KC_3"] = "#\n3";
	_g.h["KC_4"] = "$\n4";
	_g.h["KC_5"] = "%\n5";
	_g.h["KC_6"] = "^\n6";
	_g.h["KC_7"] = "&\n7";
	_g.h["KC_8"] = "*\n8";
	_g.h["KC_9"] = "(\n9";
	_g.h["KC_0"] = ")\n0";
	_g.h["KC_MINS"] = "_\n-";
	_g.h["KC_EQL"] = "+\n=";
	_g.h["KC_GRV"] = "~\n`";
	_g.h["KC_LBRC"] = "{\n[";
	_g.h["KC_RBRC"] = "}\n]";
	_g.h["KC_BSLS"] = "|\n\\";
	_g.h["KC_SCLN"] = ":\n;";
	_g.h["KC_QUOT"] = "\"\n'";
	_g.h["KC_COMM"] = "<\n,";
	_g.h["KC_DOT"] = ">\n.";
	_g.h["KC_SLSH"] = "?\n/";
	_g.h["KC_PEQL"] = "=";
	_g.h["KC_PCMM"] = ",";
	_g.h["KC_F1"] = "F1";
	_g.h["KC_F2"] = "F2";
	_g.h["KC_F3"] = "F3";
	_g.h["KC_F4"] = "F4";
	_g.h["KC_F5"] = "F5";
	_g.h["KC_F6"] = "F6";
	_g.h["KC_F7"] = "F7";
	_g.h["KC_F8"] = "F8";
	_g.h["KC_F9"] = "F9";
	_g.h["KC_F10"] = "F10";
	_g.h["KC_F11"] = "F11";
	_g.h["KC_F12"] = "F12";
	_g.h["KC_PSCR"] = "Print Screen";
	_g.h["KC_SLCK"] = "Scroll Lock";
	_g.h["KC_PAUS"] = "Pause";
	_g.h["KC_TAB"] = "Tab";
	_g.h["KC_BSPC"] = "Backspace";
	_g.h["KC_INS"] = "Insert";
	_g.h["KC_DEL"] = "Del";
	_g.h["KC_HOME"] = "Home";
	_g.h["KC_END"] = "End";
	_g.h["KC_PGUP"] = "Page Up";
	_g.h["KC_PGDN"] = "Page Down";
	_g.h["KC_NLCK"] = "Num\nLock";
	_g.h["KC_CAPS"] = "Caps Lock";
	_g.h["KC_ENT"] = "Enter";
	_g.h["KC_P1"] = "1";
	_g.h["KC_P2"] = "2";
	_g.h["KC_P3"] = "3";
	_g.h["KC_P4"] = "4";
	_g.h["KC_P5"] = "5";
	_g.h["KC_P6"] = "6";
	_g.h["KC_P7"] = "7";
	_g.h["KC_P8"] = "8";
	_g.h["KC_P9"] = "9";
	_g.h["KC_P0"] = "0";
	_g.h["KC_PSLS"] = "÷";
	_g.h["KC_PAST"] = "×";
	_g.h["KC_PMNS"] = "-";
	_g.h["KC_PPLS"] = "+";
	_g.h["KC_PDOT"] = ".";
	_g.h["KC_PENT"] = "Num\nEnter";
	_g.h["KC_LSFT"] = "Left Shift";
	_g.h["KC_RSFT"] = "Right Shift";
	_g.h["KC_LCTL"] = "Left Ctrl";
	_g.h["KC_RCTL"] = "Right Ctrl";
	_g.h["KC_LGUI"] = "Left Win";
	_g.h["KC_RGUI"] = "Right Win";
	_g.h["KC_LALT"] = "Left Alt";
	_g.h["KC_RALT"] = "Right Alt";
	_g.h["KC_SPC"] = "Space";
	_g.h["KC_APP"] = "Menu";
	_g.h["KC_LEFT"] = "Left";
	_g.h["KC_DOWN"] = "Down";
	_g.h["KC_UP"] = "Up";
	_g.h["KC_RGHT"] = "Right";
	_g.h["BR_DEC"] = "Bright -";
	_g.h["BR_INC"] = "Bright +";
	_g.h["EF_DEC"] = "Effect -";
	_g.h["EF_INC"] = "Effect +";
	_g.h["ES_DEC"] = "Effect Speed -";
	_g.h["ES_INC"] = "Effect Speed +";
	_g.h["H1_DEC"] = "Color1 Hue -";
	_g.h["H1_INC"] = "Color1 Hue +";
	_g.h["H2_DEC"] = "Color2 Hue -";
	_g.h["H2_INC"] = "Color2 Hue +";
	_g.h["S1_DEC"] = "Color1 Sat -";
	_g.h["S1_INC"] = "Color1 Sat +";
	_g.h["S2_DEC"] = "Color2 Sat -";
	_g.h["S2_INC"] = "Color2 Sat +";
	_g.h["KC_VOLD"] = "Vol -";
	_g.h["KC_VOLU"] = "Vol +";
	_g.h["KC_MUTE"] = "Mute";
	_g.h["KC_MPLY"] = "Play";
	_g.h["KC_MSTP"] = "Media Stop";
	_g.h["KC_MPRV"] = "Previous";
	_g.h["KC_MNXT"] = "Next";
	_g.h["KC_MRWD"] = "Rewind";
	_g.h["KC_MFFD"] = "Fast Forward";
	_g.h["KC_MSEL"] = "Select";
	_g.h["KC_EJCT"] = "Eject";
	_g.h["MACRO(0)"] = "M0";
	_g.h["MACRO(1)"] = "M1";
	_g.h["MACRO(2)"] = "M2";
	_g.h["MACRO(3)"] = "M3";
	_g.h["MACRO(4)"] = "M4";
	_g.h["MACRO(5)"] = "M5";
	_g.h["MACRO(6)"] = "M6";
	_g.h["MACRO(7)"] = "M7";
	_g.h["MACRO(8)"] = "M8";
	_g.h["MACRO(9)"] = "M9";
	_g.h["MACRO(10)"] = "M10";
	_g.h["MACRO(11)"] = "M11";
	_g.h["MACRO(12)"] = "M12";
	_g.h["MACRO(13)"] = "M13";
	_g.h["MACRO(14)"] = "M14";
	_g.h["MACRO(15)"] = "M15";
	_g.h["S(KC_GRV)"] = "~";
	_g.h["S(KC_1)"] = "!";
	_g.h["S(KC_2)"] = "@";
	_g.h["S(KC_3)"] = "#";
	_g.h["S(KC_4)"] = "$";
	_g.h["S(KC_5)"] = "%";
	_g.h["S(KC_6)"] = "^";
	_g.h["S(KC_7)"] = "&";
	_g.h["S(KC_8)"] = "*";
	_g.h["S(KC_9)"] = "(";
	_g.h["S(KC_0)"] = ")";
	_g.h["S(KC_MINS)"] = "_";
	_g.h["S(KC_EQL)"] = "+";
	_g.h["S(KC_LBRC)"] = "{";
	_g.h["S(KC_RBRC)"] = "}";
	_g.h["S(KC_BSLS)"] = "|";
	_g.h["S(KC_SCLN)"] = ":";
	_g.h["S(KC_QUOT)"] = "\"";
	_g.h["S(KC_COMM)"] = "<";
	_g.h["S(KC_DOT)"] = ">";
	_g.h["S(KC_SLSH)"] = "?";
	_g.h["KC_NUHS"] = "NUHS";
	_g.h["KC_NUBS"] = "NUBS";
	_g.h["KC_RO"] = "Ro";
	_g.h["KC_JYEN"] = "¥";
	_g.h["KC_MHEN"] = "無変換";
	_g.h["KC_HANJ"] = "漢字";
	_g.h["KC_HAEN"] = "한영";
	_g.h["KC_HENK"] = "変換";
	_g.h["KC_KANA"] = "かな";
	_g.h["KC_GESC"] = "Esc `";
	_g.h["KC_LSPO"] = "LS (";
	_g.h["KC_RSPC"] = "RS )";
	_g.h["KC_LCPO"] = "LC (";
	_g.h["KC_RCPC"] = "RC )";
	_g.h["KC_LAPO"] = "LA (";
	_g.h["KC_RAPC"] = "RA )";
	_g.h["KC_SFTENT"] = "SftEnt";
	_g.h["RESET"] = "Reset";
	_g.h["DEBUG"] = "Debug";
	_g.h["MAGIC_TOGGLE_NKRO"] = "Toggle NKRO";
	_g.h["KC_LNUM"] = "Locking Num Lock";
	_g.h["KC_LCAP"] = "Locking Caps Lock";
	_g.h["KC_LSCR"] = "Locking Scroll Lock";
	_g.h["KC_PWR"] = "Power";
	_g.h["KC_POWER"] = "Power OSX";
	_g.h["KC_SLEP"] = "Sleep";
	_g.h["KC_WAKE"] = "Wake";
	_g.h["KC_CALC"] = "Calc";
	_g.h["KC_MAIL"] = "Mail";
	_g.h["KC_HELP"] = "Help";
	_g.h["KC_STOP"] = "Stop";
	_g.h["KC_ERAS"] = "Alt Erase";
	_g.h["KC_AGAIN"] = "Again";
	_g.h["KC_MENU"] = "Menu";
	_g.h["KC_UNDO"] = "Undo";
	_g.h["KC_SELECT"] = "Select";
	_g.h["KC_EXECUTE"] = "Exec";
	_g.h["KC_CUT"] = "Cut";
	_g.h["KC_COPY"] = "Copy";
	_g.h["KC_PASTE"] = "Paste";
	_g.h["KC_FIND"] = "Find";
	_g.h["KC_MYCM"] = "My Comp";
	_g.h["KC_WWW_HOME"] = "Home";
	_g.h["KC_WWW_BACK"] = "Back";
	_g.h["KC_WWW_FORWARD"] = "Forward";
	_g.h["KC_WWW_STOP"] = "Stop";
	_g.h["KC_WWW_REFRESH"] = "Refresh";
	_g.h["KC_WWW_FAVORITES"] = "Favorites";
	_g.h["KC_WWW_SEARCH"] = "Search";
	_g.h["KC_BRIU"] = "Screen +";
	_g.h["KC_BRID"] = "Screen -";
	_g.h["KC_F13"] = "F13";
	_g.h["KC_F14"] = "F14";
	_g.h["KC_F15"] = "F15";
	_g.h["KC_F16"] = "F16";
	_g.h["KC_F17"] = "F17";
	_g.h["KC_F18"] = "F18";
	_g.h["KC_F19"] = "F19";
	_g.h["KC_F20"] = "F20";
	_g.h["KC_F21"] = "F21";
	_g.h["KC_F22"] = "F22";
	_g.h["KC_F23"] = "F23";
	_g.h["KC_F24"] = "F24";
	_g.h["KC_MS_UP"] = "Mouse ↑";
	_g.h["KC_MS_DOWN"] = "Mouse ↓";
	_g.h["KC_MS_LEFT"] = "Mouse ←";
	_g.h["KC_MS_RIGHT"] = "Mouse →";
	_g.h["KC_MS_BTN1"] = "Mouse Btn1";
	_g.h["KC_MS_BTN2"] = "Mouse Btn2";
	_g.h["KC_MS_BTN3"] = "Mouse Btn3";
	_g.h["KC_MS_BTN4"] = "Mouse Btn4";
	_g.h["KC_MS_BTN5"] = "Mouse Btn5";
	_g.h["KC_MS_BTN6"] = "Mouse Btn6";
	_g.h["KC_MS_BTN7"] = "Mouse Btn7";
	_g.h["KC_MS_BTN8"] = "Mouse Btn8";
	_g.h["KC_MS_WH_UP"] = "Mouse Wh ↑";
	_g.h["KC_MS_WH_DOWN"] = "Mouse Wh ↓";
	_g.h["KC_MS_WH_LEFT"] = "Mouse Wh ←";
	_g.h["KC_MS_WH_RIGHT"] = "Mouse Wh →";
	_g.h["KC_MS_ACCEL0"] = "Mouse Acc0";
	_g.h["KC_MS_ACCEL1"] = "Mouse Acc1";
	_g.h["KC_MS_ACCEL2"] = "Mouse Acc2";
	_g.h["AU_ON"] = "Audio On";
	_g.h["AU_OFF"] = "Audio Off";
	_g.h["AU_TOG"] = "Audio Toggle";
	_g.h["CLICKY_TOGGLE"] = "Clicky Toggle";
	_g.h["CLICKY_ENABLE"] = "Clicky Enable";
	_g.h["CLICKY_DISABLE"] = "Clicky Disable";
	_g.h["CLICKY_UP"] = "Clicky Up";
	_g.h["CLICKY_DOWN"] = "Clicky Down";
	_g.h["CLICKY_RESET"] = "Clicky Reset";
	_g.h["MU_ON"] = "Music On";
	_g.h["MU_OFF"] = "Music Off";
	_g.h["MU_TOG"] = "Music Toggle";
	_g.h["MU_MOD"] = "Music Mode";
	_g.h["BL_TOGG"] = "BL Toggle";
	_g.h["BL_ON"] = "BL On";
	_g.h["BL_OFF"] = "BL Off";
	_g.h["BL_DEC"] = "BL -";
	_g.h["BL_INC"] = "BL +";
	_g.h["BL_STEP"] = "BL Cycle";
	_g.h["BL_BRTG"] = "BR Toggle";
	_g.h["RGB_TOG"] = "RGB Toggle";
	_g.h["RGB_RMOD"] = "RGB Mode -";
	_g.h["RGB_MOD"] = "RGB Mode +";
	_g.h["RGB_HUD"] = "Hue -";
	_g.h["RGB_HUI"] = "Hue +";
	_g.h["RGB_SAD"] = "Sat -";
	_g.h["RGB_SAI"] = "Sat +";
	_g.h["RGB_VAD"] = "Bright -";
	_g.h["RGB_VAI"] = "Bright +";
	_g.h["RGB_SPD"] = "Effect Speed-";
	_g.h["RGB_SPI"] = "Effect Speed+";
	_g.h["RGB_M_P"] = "RGB Mode P";
	_g.h["RGB_M_B"] = "RGB Mode B";
	_g.h["RGB_M_R"] = "RGB Mode R";
	_g.h["RGB_M_SW"] = "RGB Mode SW";
	_g.h["RGB_M_SN"] = "RGB Mode SN";
	_g.h["RGB_M_K"] = "RGB Mode K";
	_g.h["RGB_M_X"] = "RGB Mode X";
	_g.h["RGB_M_G"] = "RGB Mode G";
	_g.h["CUSTOM(0)"] = "CUSTOM(0)";
	_g.h["CUSTOM(1)"] = "CUSTOM(1)";
	_g.h["CUSTOM(2)"] = "CUSTOM(2)";
	_g.h["CUSTOM(3)"] = "CUSTOM(3)";
	_g.h["CUSTOM(4)"] = "CUSTOM(4)";
	_g.h["CUSTOM(5)"] = "CUSTOM(5)";
	_g.h["CUSTOM(6)"] = "CUSTOM(6)";
	_g.h["CUSTOM(7)"] = "CUSTOM(7)";
	_g.h["CUSTOM(8)"] = "CUSTOM(8)";
	_g.h["CUSTOM(9)"] = "CUSTOM(9)";
	_g.h["CUSTOM(10)"] = "CUSTOM(10)";
	_g.h["CUSTOM(11)"] = "CUSTOM(11)";
	_g.h["CUSTOM(12)"] = "CUSTOM(12)";
	_g.h["CUSTOM(13)"] = "CUSTOM(13)";
	_g.h["CUSTOM(14)"] = "CUSTOM(14)";
	_g.h["CUSTOM(15)"] = "CUSTOM(15)";
	$r = _g;
	return $r;
}(this));
vial_VialKey.toDrawerKey_rx_json = new EReg("^(?:" + ["\\{" + ".+" + "\\}","\"" + ".+" + "\""].join("|") + ")\\s*$","");
vial_VialKey.toDrawerKey_rx_pair = new EReg("^(\\w+)" + "\\(" + "(.+)" + "\\)$","");
vial_VialKey.toDrawerKey_rx_shift = new EReg("^([LR]SFT)" + "\\(" + "(.+)" + "\\)$","");
vial_VialKey.toDrawerKey_rx_lt = new EReg("^" + "(?:" + "LT(\\d)\\(" + "|" + "LT\\((\\d+),\\s*" + ")" + "(.+)" + "\\)" + "$","");
vial_VialKey.toDrawerKey_rx_td = new EReg("^TD" + "\\(" + "(\\d+)" + "\\)$","");
vial_VialKey.toDrawerKey_rx_layer = new EReg("^(MO|DF|TG|TT|OSL|TO)" + "\\(" + "(\\d+)" + "\\)$","");
vial_VialKey.toDrawerKey_rx_modTap = new EReg("^" + "(\\w+)_T" + "\\(" + "(.+)" + "\\)","");
vial_VialKeyNames.map = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["KC_TRNS"] = "▽";
	_g.h["KC_NUMLOCK"] = "Num\nLock";
	_g.h["KC_KP_SLASH"] = "/";
	_g.h["KC_KP_ASTERISK"] = "*";
	_g.h["KC_KP_MINUS"] = "-";
	_g.h["KC_KP_PLUS"] = "+";
	_g.h["KC_KP_ENTER"] = "Num\nEnter";
	_g.h["KC_KP_1"] = "1";
	_g.h["KC_KP_2"] = "2";
	_g.h["KC_KP_3"] = "3";
	_g.h["KC_KP_4"] = "4";
	_g.h["KC_KP_5"] = "5";
	_g.h["KC_KP_6"] = "6";
	_g.h["KC_KP_7"] = "7";
	_g.h["KC_KP_8"] = "8";
	_g.h["KC_KP_9"] = "9";
	_g.h["KC_KP_0"] = "0";
	_g.h["KC_KP_DOT"] = ".";
	_g.h["KC_KP_EQUAL"] = "=";
	_g.h["KC_KP_COMMA"] = ",";
	_g.h["KC_PSCREEN"] = "Print\nScreen";
	_g.h["KC_SCROLLLOCK"] = "Scroll\nLock";
	_g.h["KC_PAUSE"] = "Pause";
	_g.h["KC_INSERT"] = "Insert";
	_g.h["KC_HOME"] = "Home";
	_g.h["KC_PGUP"] = "Page\nUp";
	_g.h["KC_DELETE"] = "Del";
	_g.h["KC_END"] = "End";
	_g.h["KC_PGDOWN"] = "Page\nDown";
	_g.h["KC_RIGHT"] = "Right";
	_g.h["KC_LEFT"] = "Left";
	_g.h["KC_DOWN"] = "Down";
	_g.h["KC_UP"] = "Up";
	_g.h["KC_A"] = "A";
	_g.h["KC_B"] = "B";
	_g.h["KC_C"] = "C";
	_g.h["KC_D"] = "D";
	_g.h["KC_E"] = "E";
	_g.h["KC_F"] = "F";
	_g.h["KC_G"] = "G";
	_g.h["KC_H"] = "H";
	_g.h["KC_I"] = "I";
	_g.h["KC_J"] = "J";
	_g.h["KC_K"] = "K";
	_g.h["KC_L"] = "L";
	_g.h["KC_M"] = "M";
	_g.h["KC_N"] = "N";
	_g.h["KC_O"] = "O";
	_g.h["KC_P"] = "P";
	_g.h["KC_Q"] = "Q";
	_g.h["KC_R"] = "R";
	_g.h["KC_S"] = "S";
	_g.h["KC_T"] = "T";
	_g.h["KC_U"] = "U";
	_g.h["KC_V"] = "V";
	_g.h["KC_W"] = "W";
	_g.h["KC_X"] = "X";
	_g.h["KC_Y"] = "Y";
	_g.h["KC_Z"] = "Z";
	_g.h["KC_1"] = "!\n1";
	_g.h["KC_2"] = "@\n2";
	_g.h["KC_3"] = "#\n3";
	_g.h["KC_4"] = "$\n4";
	_g.h["KC_5"] = "%\n5";
	_g.h["KC_6"] = "^\n6";
	_g.h["KC_7"] = "&\n7";
	_g.h["KC_8"] = "*\n8";
	_g.h["KC_9"] = "(\n9";
	_g.h["KC_0"] = ")\n0";
	_g.h["KC_ENTER"] = "Enter";
	_g.h["KC_ESCAPE"] = "Esc";
	_g.h["KC_BSPACE"] = "Bksp";
	_g.h["KC_TAB"] = "Tab";
	_g.h["KC_SPACE"] = "Space";
	_g.h["KC_MINUS"] = "_\n-";
	_g.h["KC_EQUAL"] = "+\n=";
	_g.h["KC_LBRACKET"] = "{\n[";
	_g.h["KC_RBRACKET"] = "}\n]";
	_g.h["KC_BSLASH"] = "|\n\\";
	_g.h["KC_SCOLON"] = ":\n;";
	_g.h["KC_QUOTE"] = "\"\n'";
	_g.h["KC_GRAVE"] = "~\n`";
	_g.h["KC_COMMA"] = "<\n,";
	_g.h["KC_DOT"] = ">\n.";
	_g.h["KC_SLASH"] = "?\n/";
	_g.h["KC_CAPSLOCK"] = "Caps\nLock";
	_g.h["KC_F1"] = "F1";
	_g.h["KC_F2"] = "F2";
	_g.h["KC_F3"] = "F3";
	_g.h["KC_F4"] = "F4";
	_g.h["KC_F5"] = "F5";
	_g.h["KC_F6"] = "F6";
	_g.h["KC_F7"] = "F7";
	_g.h["KC_F8"] = "F8";
	_g.h["KC_F9"] = "F9";
	_g.h["KC_F10"] = "F10";
	_g.h["KC_F11"] = "F11";
	_g.h["KC_F12"] = "F12";
	_g.h["KC_APPLICATION"] = "Menu";
	_g.h["KC_LCTRL"] = "LCtrl";
	_g.h["KC_LSHIFT"] = "LShift";
	_g.h["KC_LALT"] = "LAlt";
	_g.h["KC_LGUI"] = "LGui";
	_g.h["KC_RCTRL"] = "RCtrl";
	_g.h["KC_RSHIFT"] = "RShift";
	_g.h["KC_RALT"] = "RAlt";
	_g.h["KC_RGUI"] = "RGui";
	_g.h["KC_NONUS_HASH"] = "~\n#";
	_g.h["KC_NONUS_BSLASH"] = "|\n\\";
	_g.h["KC_RO"] = "_\n\\";
	_g.h["KC_KANA"] = "カタカナ\nひらがな";
	_g.h["KC_JYEN"] = "|\n¥";
	_g.h["KC_HENK"] = "変換";
	_g.h["KC_MHEN"] = "無変換";
	_g.h["KC_LANG1"] = "한영\nかな";
	_g.h["KC_LANG2"] = "漢字\n英数";
	_g.h["RESET"] = "Reset";
	_g.h["OSM(MOD_LSFT)"] = "OSM\nLSft";
	_g.h["OSM(MOD_LCTL)"] = "OSM\nLCtl";
	_g.h["OSM(MOD_LALT)"] = "OSM\nLAlt";
	_g.h["OSM(MOD_LGUI)"] = "OSM\nLGUI";
	_g.h["OSM(MOD_RSFT)"] = "OSM\nRSft";
	_g.h["OSM(MOD_RCTL)"] = "OSM\nRCtl";
	_g.h["OSM(MOD_RALT)"] = "OSM\nRAlt";
	_g.h["OSM(MOD_RGUI)"] = "OSM\nRGUI";
	_g.h["OSM(MOD_LCTL|MOD_LSFT)"] = "OSM\nCS";
	_g.h["OSM(MOD_LCTL|MOD_LALT)"] = "OSM\nCA";
	_g.h["OSM(MOD_LCTL|MOD_LGUI)"] = "OSM\nCG";
	_g.h["OSM(MOD_LSFT|MOD_LALT)"] = "OSM\nSA";
	_g.h["OSM(MOD_LSFT|MOD_LGUI)"] = "OSM\nSG";
	_g.h["OSM(MOD_LALT|MOD_LGUI)"] = "OSM\nAG";
	_g.h["OSM(MOD_RCTL|MOD_RSFT)"] = "OSM\nRCS";
	_g.h["OSM(MOD_RCTL|MOD_RALT)"] = "OSM\nRCA";
	_g.h["OSM(MOD_RCTL|MOD_RGUI)"] = "OSM\nRCG";
	_g.h["OSM(MOD_RSFT|MOD_RALT)"] = "OSM\nRSA";
	_g.h["OSM(MOD_RSFT|MOD_RGUI)"] = "OSM\nRSG";
	_g.h["OSM(MOD_RALT|MOD_RGUI)"] = "OSM\nRAG";
	_g.h["OSM(MOD_LCTL|MOD_LSFT|MOD_LGUI)"] = "OSM\nCSG";
	_g.h["OSM(MOD_LCTL|MOD_LALT|MOD_LGUI)"] = "OSM\nCAG";
	_g.h["OSM(MOD_LSFT|MOD_LALT|MOD_LGUI)"] = "OSM\nSAG";
	_g.h["OSM(MOD_RCTL|MOD_RSFT|MOD_RGUI)"] = "OSM\nRCSG";
	_g.h["OSM(MOD_RCTL|MOD_RALT|MOD_RGUI)"] = "OSM\nRCAG";
	_g.h["OSM(MOD_RSFT|MOD_RALT|MOD_RGUI)"] = "OSM\nRSAG";
	_g.h["OSM(MOD_MEH)"] = "OSM\nMeh";
	_g.h["OSM(MOD_HYPR)"] = "OSM\nHyper";
	_g.h["OSM(MOD_RCTL|MOD_RSFT|MOD_RALT)"] = "OSM\nRMeh";
	_g.h["OSM(MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)"] = "OSM\nRHyp";
	_g.h["LSFT(kc)"] = "LSft\n(kc)";
	_g.h["LCTL(kc)"] = "LCtl\n(kc)";
	_g.h["LALT(kc)"] = "LAlt\n(kc)";
	_g.h["LGUI(kc)"] = "LGui\n(kc)";
	_g.h["RSFT(kc)"] = "RSft\n(kc)";
	_g.h["RCTL(kc)"] = "RCtl\n(kc)";
	_g.h["RALT(kc)"] = "RAlt\n(kc)";
	_g.h["RGUI(kc)"] = "RGui\n(kc)";
	_g.h["C_S(kc)"] = "LCS\n(kc)";
	_g.h["LCA(kc)"] = "LCA\n(kc)";
	_g.h["LCG(kc)"] = "LCG\n(kc)";
	_g.h["LSA(kc)"] = "LSA\n(kc)";
	_g.h["SGUI(kc)"] = "LSG\n(kc)";
	_g.h["LCAG(kc)"] = "LCAG\n(kc)";
	_g.h["RCG(kc)"] = "RCG\n(kc)";
	_g.h["MEH(kc)"] = "Meh\n(kc)";
	_g.h["HYPR(kc)"] = "Hyper\n(kc)";
	_g.h["LSFT_T(kc)"] = "LSft_T\n(kc)";
	_g.h["LCTL_T(kc)"] = "LCtl_T\n(kc)";
	_g.h["LALT_T(kc)"] = "LAlt_T\n(kc)";
	_g.h["LGUI_T(kc)"] = "LGui_T\n(kc)";
	_g.h["RSFT_T(kc)"] = "RSft_T\n(kc)";
	_g.h["RCTL_T(kc)"] = "RCtl_T\n(kc)";
	_g.h["RALT_T(kc)"] = "RAlt_T\n(kc)";
	_g.h["RGUI_T(kc)"] = "RGui_T\n(kc)";
	_g.h["C_S_T(kc)"] = "LCS_T\n(kc)";
	_g.h["LCA_T(kc)"] = "LCA_T\n(kc)";
	_g.h["LCG_T(kc)"] = "LCG_T\n(kc)";
	_g.h["LSA_T(kc)"] = "LSA_T\n(kc)";
	_g.h["SGUI_T(kc)"] = "LSG_T\n(kc)";
	_g.h["LCAG_T(kc)"] = "LCAG_T\n(kc)";
	_g.h["RCG_T(kc)"] = "RCG_T\n(kc)";
	_g.h["RCAG_T(kc)"] = "RCAG_T\n(kc)";
	_g.h["MEH_T(kc)"] = "Meh_T\n(kc)";
	_g.h["ALL_T(kc)"] = "ALL_T\n(kc)";
	_g.h["KC_GESC"] = "~\nEsc";
	_g.h["KC_LSPO"] = "LS\n(";
	_g.h["KC_RSPC"] = "RS\n)";
	_g.h["KC_LCPO"] = "LC\n(";
	_g.h["KC_RCPC"] = "RC\n)";
	_g.h["KC_LAPO"] = "LA\n(";
	_g.h["KC_RAPC"] = "RA\n)";
	_g.h["KC_SFTENT"] = "RS\nEnter";
	_g.h["MAGIC_SWAP_CONTROL_CAPSLOCK"] = "Swap\nCtrl\nCaps";
	_g.h["MAGIC_UNSWAP_CONTROL_CAPSLOCK"] = "Unswap\nCtrl\nCaps";
	_g.h["MAGIC_CAPSLOCK_TO_CONTROL"] = "Caps\nto\nCtrl";
	_g.h["MAGIC_UNCAPSLOCK_TO_CONTROL"] = "Caps\nnot to\nCtrl";
	_g.h["MAGIC_SWAP_LCTL_LGUI"] = "Swap\nLCtl\nLGui";
	_g.h["MAGIC_UNSWAP_LCTL_LGUI"] = "Unswap\nLCtl\nLGui";
	_g.h["MAGIC_SWAP_RCTL_RGUI"] = "Swap\nRCtl\nRGui";
	_g.h["MAGIC_UNSWAP_RCTL_RGUI"] = "Unswap\nRCtl\nRGui";
	_g.h["MAGIC_SWAP_CTL_GUI"] = "Swap\nCtl\nGui";
	_g.h["MAGIC_UNSWAP_CTL_GUI"] = "Unswap\nCtl\nGui";
	_g.h["MAGIC_TOGGLE_CTL_GUI"] = "Toggle\nCtl\nGui";
	_g.h["MAGIC_SWAP_LALT_LGUI"] = "Swap\nLAlt\nLGui";
	_g.h["MAGIC_UNSWAP_LALT_LGUI"] = "Unswap\nLAlt\nLGui";
	_g.h["MAGIC_SWAP_RALT_RGUI"] = "Swap\nRAlt\nRGui";
	_g.h["MAGIC_UNSWAP_RALT_RGUI"] = "Unswap\nRAlt\nRGui";
	_g.h["MAGIC_SWAP_ALT_GUI"] = "Swap\nAlt\nGui";
	_g.h["MAGIC_UNSWAP_ALT_GUI"] = "Unswap\nAlt\nGui";
	_g.h["MAGIC_TOGGLE_ALT_GUI"] = "Toggle\nAlt\nGui";
	_g.h["MAGIC_NO_GUI"] = "GUI\nOff";
	_g.h["MAGIC_UNNO_GUI"] = "GUI\nOn";
	_g.h["MAGIC_SWAP_GRAVE_ESC"] = "Swap\n`\nEsc";
	_g.h["MAGIC_UNSWAP_GRAVE_ESC"] = "Unswap\n`\nEsc";
	_g.h["MAGIC_SWAP_BACKSLASH_BACKSPACE"] = "Swap\n\\\nBS";
	_g.h["MAGIC_UNSWAP_BACKSLASH_BACKSPACE"] = "Unswap\n\\\nBS";
	_g.h["MAGIC_HOST_NKRO"] = "NKRO\nOn";
	_g.h["MAGIC_UNHOST_NKRO"] = "NKRO\nOff";
	_g.h["MAGIC_TOGGLE_NKRO"] = "NKRO\nToggle";
	_g.h["MAGIC_EE_HANDS_LEFT"] = "EEH\nLeft";
	_g.h["MAGIC_EE_HANDS_RIGHT"] = "EEH\nRight";
	_g.h["AU_ON"] = "Audio\nON";
	_g.h["AU_OFF"] = "Audio\nOFF";
	_g.h["AU_TOG"] = "Audio\nToggle";
	_g.h["CLICKY_TOGGLE"] = "Clicky\nToggle";
	_g.h["CLICKY_UP"] = "Clicky\nUp";
	_g.h["CLICKY_DOWN"] = "Clicky\nDown";
	_g.h["CLICKY_RESET"] = "Clicky\nReset";
	_g.h["MU_ON"] = "Music\nOn";
	_g.h["MU_OFF"] = "Music\nOff";
	_g.h["MU_TOG"] = "Music\nToggle";
	_g.h["MU_MOD"] = "Music\nCycle";
	_g.h["HPT_ON"] = "Haptic\nOn";
	_g.h["HPT_OFF"] = "Haptic\nOff";
	_g.h["HPT_TOG"] = "Haptic\nToggle";
	_g.h["HPT_RST"] = "Haptic\nReset";
	_g.h["HPT_FBK"] = "Haptic\nFeed\nback";
	_g.h["HPT_BUZ"] = "Haptic\nBuzz";
	_g.h["HPT_MODI"] = "Haptic\nNext";
	_g.h["HPT_MODD"] = "Haptic\nPrev";
	_g.h["HPT_CONT"] = "Haptic\nCont.";
	_g.h["HPT_CONI"] = "Haptic\n+";
	_g.h["HPT_COND"] = "Haptic\n-";
	_g.h["HPT_DWLI"] = "Haptic\nDwell+";
	_g.h["HPT_DWLD"] = "Haptic\nDwell-";
	_g.h["KC_ASDN"] = "Auto-\nshift\nDown";
	_g.h["KC_ASUP"] = "Auto-\nshift\nUp";
	_g.h["KC_ASRP"] = "Auto-\nshift\nReport";
	_g.h["KC_ASON"] = "Auto-\nshift\nOn";
	_g.h["KC_ASOFF"] = "Auto-\nshift\nOff";
	_g.h["KC_ASTG"] = "Auto-\nshift\nToggle";
	_g.h["CMB_ON"] = "Combo\nOn";
	_g.h["CMB_OFF"] = "Combo\nOff";
	_g.h["CMB_TOG"] = "Combo\nToggle";
	_g.h["BL_TOGG"] = "BL\nToggle";
	_g.h["BL_STEP"] = "BL\nCycle";
	_g.h["BL_BRTG"] = "BL\nBreath";
	_g.h["BL_ON"] = "BL On";
	_g.h["BL_OFF"] = "BL Off";
	_g.h["BL_INC"] = "BL +";
	_g.h["BL_DEC"] = "BL - ";
	_g.h["RGB_TOG"] = "RGB\nToggle";
	_g.h["RGB_MOD"] = "RGB\nMode +";
	_g.h["RGB_RMOD"] = "RGB\nMode -";
	_g.h["RGB_HUI"] = "Hue +";
	_g.h["RGB_HUD"] = "Hue -";
	_g.h["RGB_SAI"] = "Sat +";
	_g.h["RGB_SAD"] = "Sat -";
	_g.h["RGB_VAI"] = "Bright +";
	_g.h["RGB_VAD"] = "Bright -";
	_g.h["RGB_SPI"] = "Effect +";
	_g.h["RGB_SPD"] = "Effect -";
	_g.h["RGB_M_P"] = "RGB\nMode P";
	_g.h["RGB_M_B"] = "RGB\nMode B";
	_g.h["RGB_M_R"] = "RGB\nMode R";
	_g.h["RGB_M_SW"] = "RGB\nMode SW";
	_g.h["RGB_M_SN"] = "RGB\nMode SN";
	_g.h["RGB_M_K"] = "RGB\nMode K";
	_g.h["RGB_M_X"] = "RGB\nMode X";
	_g.h["RGB_M_G"] = "RGB\nMode G";
	_g.h["RGB_M_T"] = "RGB\nMode T";
	_g.h["KC_PWR"] = "Power";
	_g.h["KC_SLEP"] = "Sleep";
	_g.h["KC_WAKE"] = "Wake";
	_g.h["KC_EXEC"] = "Exec";
	_g.h["KC_SLCT"] = "Select";
	_g.h["KC_AGIN"] = "Again";
	_g.h["KC_PSTE"] = "Paste";
	_g.h["KC_CALC"] = "Calc";
	_g.h["KC_MAIL"] = "Mail";
	_g.h["KC_MSEL"] = "Media\nPlayer";
	_g.h["KC_MYCM"] = "My\nPC";
	_g.h["KC_WSCH"] = "Browser\nSearch";
	_g.h["KC_WHOM"] = "Browser\nHome";
	_g.h["KC_WBAK"] = "Browser\nBack";
	_g.h["KC_WFWD"] = "Browser\nForward";
	_g.h["KC_WSTP"] = "Browser\nStop";
	_g.h["KC_WREF"] = "Browser\nRefresh";
	_g.h["KC_WFAV"] = "Browser\nFav.";
	_g.h["KC_BRIU"] = "Bright.\nUp";
	_g.h["KC_BRID"] = "Bright.\nDown";
	_g.h["KC_MPRV"] = "Media\nPrev";
	_g.h["KC_MNXT"] = "Media\nNext";
	_g.h["KC_MUTE"] = "Mute";
	_g.h["KC_VOLD"] = "Vol -";
	_g.h["KC_VOLU"] = "Vol +";
	_g.h["KC__VOLDOWN"] = "Vol -\nAlt";
	_g.h["KC__VOLUP"] = "Vol +\nAlt";
	_g.h["KC_MSTP"] = "Media\nStop";
	_g.h["KC_MPLY"] = "Media\nPlay";
	_g.h["KC_MRWD"] = "Prev\nTrack\n(macOS)";
	_g.h["KC_MFFD"] = "Next\nTrack\n(macOS)";
	_g.h["KC_EJCT"] = "Eject";
	_g.h["KC_MS_U"] = "Mouse\nUp";
	_g.h["KC_MS_D"] = "Mouse\nDown";
	_g.h["KC_MS_L"] = "Mouse\nLeft";
	_g.h["KC_MS_R"] = "Mouse\nRight";
	_g.h["KC_BTN1"] = "Mouse\n1";
	_g.h["KC_BTN2"] = "Mouse\n2";
	_g.h["KC_BTN3"] = "Mouse\n3";
	_g.h["KC_BTN4"] = "Mouse\n4";
	_g.h["KC_BTN5"] = "Mouse\n5";
	_g.h["KC_WH_U"] = "Mouse\nWheel\nUp";
	_g.h["KC_WH_D"] = "Mouse\nWheel\nDown";
	_g.h["KC_WH_L"] = "Mouse\nWheel\nLeft";
	_g.h["KC_WH_R"] = "Mouse\nWheel\nRight";
	_g.h["KC_ACL0"] = "Mouse\nAccel\n0";
	_g.h["KC_ACL1"] = "Mouse\nAccel\n1";
	_g.h["KC_ACL2"] = "Mouse\nAccel\n2";
	_g.h["KC_LCAP"] = "Locking\nCaps";
	_g.h["KC_LNUM"] = "Locking\nNum";
	_g.h["KC_LSCR"] = "Locking\nScroll";
	_g.h["DYN_REC_START1"] = "DM1\nRec";
	_g.h["DYN_REC_START2"] = "DM2\nRec";
	_g.h["DYN_REC_STOP"] = "DM Rec\nStop";
	_g.h["DYN_MACRO_PLAY1"] = "DM1\nPlay";
	_g.h["DYN_MACRO_PLAY2"] = "DM2\nPlay";
	_g.h["MI_C"] = "ᴹᴵᴰᴵ\nC";
	_g.h["MI_Cs"] = "ᴹᴵᴰᴵ\nC#/Dᵇ";
	_g.h["MI_D"] = "ᴹᴵᴰᴵ\nD";
	_g.h["MI_Ds"] = "ᴹᴵᴰᴵ\nD#/Eᵇ";
	_g.h["MI_E"] = "ᴹᴵᴰᴵ\nE";
	_g.h["MI_F"] = "ᴹᴵᴰᴵ\nF";
	_g.h["MI_Fs"] = "ᴹᴵᴰᴵ\nF#/Gᵇ";
	_g.h["MI_G"] = "ᴹᴵᴰᴵ\nG";
	_g.h["MI_Gs"] = "ᴹᴵᴰᴵ\nG#/Aᵇ";
	_g.h["MI_A"] = "ᴹᴵᴰᴵ\nA";
	_g.h["MI_As"] = "ᴹᴵᴰᴵ\nA#/Bᵇ";
	_g.h["MI_B"] = "ᴹᴵᴰᴵ\nB";
	_g.h["MI_C_1"] = "ᴹᴵᴰᴵ\nC₁";
	_g.h["MI_Cs_1"] = "ᴹᴵᴰᴵ\nC#₁/Dᵇ₁";
	_g.h["MI_D_1"] = "ᴹᴵᴰᴵ\nD₁";
	_g.h["MI_Ds_1"] = "ᴹᴵᴰᴵ\nD#₁/Eᵇ₁";
	_g.h["MI_E_1"] = "ᴹᴵᴰᴵ\nE₁";
	_g.h["MI_F_1"] = "ᴹᴵᴰᴵ\nF₁";
	_g.h["MI_Fs_1"] = "ᴹᴵᴰᴵ\nF#₁/Gᵇ₁";
	_g.h["MI_G_1"] = "ᴹᴵᴰᴵ\nG₁";
	_g.h["MI_Gs_1"] = "ᴹᴵᴰᴵ\nG#₁/Aᵇ₁";
	_g.h["MI_A_1"] = "ᴹᴵᴰᴵ\nA₁";
	_g.h["MI_As_1"] = "ᴹᴵᴰᴵ\nA#₁/Bᵇ₁";
	_g.h["MI_B_1"] = "ᴹᴵᴰᴵ\nB₁";
	_g.h["MI_C_2"] = "ᴹᴵᴰᴵ\nC₂";
	_g.h["MI_Cs_2"] = "ᴹᴵᴰᴵ\nC#₂/Dᵇ₂";
	_g.h["MI_D_2"] = "ᴹᴵᴰᴵ\nD₂";
	_g.h["MI_Ds_2"] = "ᴹᴵᴰᴵ\nD#₂/Eᵇ₂";
	_g.h["MI_E_2"] = "ᴹᴵᴰᴵ\nE₂";
	_g.h["MI_F_2"] = "ᴹᴵᴰᴵ\nF₂";
	_g.h["MI_Fs_2"] = "ᴹᴵᴰᴵ\nF#₂/Gᵇ₂";
	_g.h["MI_G_2"] = "ᴹᴵᴰᴵ\nG₂";
	_g.h["MI_Gs_2"] = "ᴹᴵᴰᴵ\nG#₂/Aᵇ₂";
	_g.h["MI_A_2"] = "ᴹᴵᴰᴵ\nA₂";
	_g.h["MI_As_2"] = "ᴹᴵᴰᴵ\nA#₂/Bᵇ₂";
	_g.h["MI_B_2"] = "ᴹᴵᴰᴵ\nB₂";
	_g.h["MI_C_3"] = "ᴹᴵᴰᴵ\nC₃";
	_g.h["MI_Cs_3"] = "ᴹᴵᴰᴵ\nC#₃/Dᵇ₃";
	_g.h["MI_D_3"] = "ᴹᴵᴰᴵ\nD₃";
	_g.h["MI_Ds_3"] = "ᴹᴵᴰᴵ\nD#₃/Eᵇ₃";
	_g.h["MI_E_3"] = "ᴹᴵᴰᴵ\nE₃";
	_g.h["MI_F_3"] = "ᴹᴵᴰᴵ\nF₃";
	_g.h["MI_Fs_3"] = "ᴹᴵᴰᴵ\nF#₃/Gᵇ₃";
	_g.h["MI_G_3"] = "ᴹᴵᴰᴵ\nG₃";
	_g.h["MI_Gs_3"] = "ᴹᴵᴰᴵ\nG#₃/Aᵇ₃";
	_g.h["MI_A_3"] = "ᴹᴵᴰᴵ\nA₃";
	_g.h["MI_As_3"] = "ᴹᴵᴰᴵ\nA#₃/Bᵇ₃";
	_g.h["MI_B_3"] = "ᴹᴵᴰᴵ\nB₃";
	_g.h["MI_C_4"] = "ᴹᴵᴰᴵ\nC₄";
	_g.h["MI_Cs_4"] = "ᴹᴵᴰᴵ\nC#₄/Dᵇ₄";
	_g.h["MI_D_4"] = "ᴹᴵᴰᴵ\nD₄";
	_g.h["MI_Ds_4"] = "ᴹᴵᴰᴵ\nD#₄/Eᵇ₄";
	_g.h["MI_E_4"] = "ᴹᴵᴰᴵ\nE₄";
	_g.h["MI_F_4"] = "ᴹᴵᴰᴵ\nF₄";
	_g.h["MI_Fs_4"] = "ᴹᴵᴰᴵ\nF#₄/Gᵇ₄";
	_g.h["MI_G_4"] = "ᴹᴵᴰᴵ\nG₄";
	_g.h["MI_Gs_4"] = "ᴹᴵᴰᴵ\nG#₄/Aᵇ₄";
	_g.h["MI_A_4"] = "ᴹᴵᴰᴵ\nA₄";
	_g.h["MI_As_4"] = "ᴹᴵᴰᴵ\nA#₄/Bᵇ₄";
	_g.h["MI_B_4"] = "ᴹᴵᴰᴵ\nB₄";
	_g.h["MI_C_5"] = "ᴹᴵᴰᴵ\nC₅";
	_g.h["MI_Cs_5"] = "ᴹᴵᴰᴵ\nC#₅/Dᵇ₅";
	_g.h["MI_D_5"] = "ᴹᴵᴰᴵ\nD₅";
	_g.h["MI_Ds_5"] = "ᴹᴵᴰᴵ\nD#₅/Eᵇ₅";
	_g.h["MI_E_5"] = "ᴹᴵᴰᴵ\nE₅";
	_g.h["MI_F_5"] = "ᴹᴵᴰᴵ\nF₅";
	_g.h["MI_Fs_5"] = "ᴹᴵᴰᴵ\nF#₅/Gᵇ₅";
	_g.h["MI_G_5"] = "ᴹᴵᴰᴵ\nG₅";
	_g.h["MI_Gs_5"] = "ᴹᴵᴰᴵ\nG#₅/Aᵇ₅";
	_g.h["MI_A_5"] = "ᴹᴵᴰᴵ\nA₅";
	_g.h["MI_As_5"] = "ᴹᴵᴰᴵ\nA#₅/Bᵇ₅";
	_g.h["MI_B_5"] = "ᴹᴵᴰᴵ\nB₅";
	_g.h["MI_ALLOFF"] = "ᴹᴵᴰᴵ\nNotesᵒᶠᶠ";
	_g.h["MI_OCT_N2"] = "ᴹᴵᴰᴵ\nOct₋₂";
	_g.h["MI_OCT_N1"] = "ᴹᴵᴰᴵ\nOct₋₁";
	_g.h["MI_OCT_0"] = "ᴹᴵᴰᴵ\nOct₀";
	_g.h["MI_OCT_1"] = "ᴹᴵᴰᴵ\nOct₊₁";
	_g.h["MI_OCT_2"] = "ᴹᴵᴰᴵ\nOct₊₂";
	_g.h["MI_OCT_3"] = "ᴹᴵᴰᴵ\nOct₊₃";
	_g.h["MI_OCT_4"] = "ᴹᴵᴰᴵ\nOct₊₄";
	_g.h["MI_OCT_5"] = "ᴹᴵᴰᴵ\nOct₊₅";
	_g.h["MI_OCT_6"] = "ᴹᴵᴰᴵ\nOct₊₆";
	_g.h["MI_OCT_7"] = "ᴹᴵᴰᴵ\nOct₊₇";
	_g.h["MI_OCTD"] = "ᴹᴵᴰᴵ\nOctᴰᴺ";
	_g.h["MI_OCTU"] = "ᴹᴵᴰᴵ\nOctᵁᴾ";
	_g.h["MI_TRNS_N6"] = "ᴹᴵᴰᴵ\nTrans₋₆";
	_g.h["MI_TRNS_N5"] = "ᴹᴵᴰᴵ\nTrans₋₅";
	_g.h["MI_TRNS_N4"] = "ᴹᴵᴰᴵ\nTrans₋₄";
	_g.h["MI_TRNS_N3"] = "ᴹᴵᴰᴵ\nTrans₋₃";
	_g.h["MI_TRNS_N2"] = "ᴹᴵᴰᴵ\nTrans₋₂";
	_g.h["MI_TRNS_N1"] = "ᴹᴵᴰᴵ\nTrans₋₁";
	_g.h["MI_TRNS_0"] = "ᴹᴵᴰᴵ\nTrans₀";
	_g.h["MI_TRNS_1"] = "ᴹᴵᴰᴵ\nTrans₊₁";
	_g.h["MI_TRNS_2"] = "ᴹᴵᴰᴵ\nTrans₊₂";
	_g.h["MI_TRNS_3"] = "ᴹᴵᴰᴵ\nTrans₊₃";
	_g.h["MI_TRNS_4"] = "ᴹᴵᴰᴵ\nTrans₊₄";
	_g.h["MI_TRNS_5"] = "ᴹᴵᴰᴵ\nTrans₊₅";
	_g.h["MI_TRNS_6"] = "ᴹᴵᴰᴵ\nTrans₊₆";
	_g.h["MI_TRNSD"] = "ᴹᴵᴰᴵ\nTransᴰᴺ";
	_g.h["MI_TRNSU"] = "ᴹᴵᴰᴵ\nTransᵁᴾ";
	_g.h["MI_VEL_1"] = "ᴹᴵᴰᴵ\nVel₁";
	_g.h["MI_VEL_2"] = "ᴹᴵᴰᴵ\nVel₂";
	_g.h["MI_VEL_3"] = "ᴹᴵᴰᴵ\nVel₃";
	_g.h["MI_VEL_4"] = "ᴹᴵᴰᴵ\nVel₄";
	_g.h["MI_VEL_5"] = "ᴹᴵᴰᴵ\nVel₅";
	_g.h["MI_VEL_6"] = "ᴹᴵᴰᴵ\nVel₆";
	_g.h["MI_VEL_7"] = "ᴹᴵᴰᴵ\nVel₇";
	_g.h["MI_VEL_8"] = "ᴹᴵᴰᴵ\nVel₈";
	_g.h["MI_VEL_9"] = "ᴹᴵᴰᴵ\nVel₉";
	_g.h["MI_VEL_10"] = "ᴹᴵᴰᴵ\nVel₁₀";
	_g.h["MI_VELD"] = "ᴹᴵᴰᴵ\nVelᴰᴺ";
	_g.h["MI_VELU"] = "ᴹᴵᴰᴵ\nVelᵁᴾ";
	_g.h["MI_CH1"] = "ᴹᴵᴰᴵ\nCH₁";
	_g.h["MI_CH2"] = "ᴹᴵᴰᴵ\nCH₂";
	_g.h["MI_CH3"] = "ᴹᴵᴰᴵ\nCH₃";
	_g.h["MI_CH4"] = "ᴹᴵᴰᴵ\nCH₄";
	_g.h["MI_CH5"] = "ᴹᴵᴰᴵ\nCH₅";
	_g.h["MI_CH6"] = "ᴹᴵᴰᴵ\nCH₆";
	_g.h["MI_CH7"] = "ᴹᴵᴰᴵ\nCH₇";
	_g.h["MI_CH8"] = "ᴹᴵᴰᴵ\nCH₈";
	_g.h["MI_CH9"] = "ᴹᴵᴰᴵ\nCH₉";
	_g.h["MI_CH10"] = "ᴹᴵᴰᴵ\nCH₁₀";
	_g.h["MI_CH11"] = "ᴹᴵᴰᴵ\nCH₁₁";
	_g.h["MI_CH12"] = "ᴹᴵᴰᴵ\nCH₁₂";
	_g.h["MI_CH13"] = "ᴹᴵᴰᴵ\nCH₁₃";
	_g.h["MI_CH14"] = "ᴹᴵᴰᴵ\nCH₁₄";
	_g.h["MI_CH15"] = "ᴹᴵᴰᴵ\nCH₁₅";
	_g.h["MI_CH16"] = "ᴹᴵᴰᴵ\nCH₁₆";
	_g.h["MI_CHD"] = "ᴹᴵᴰᴵ\nCHᴰᴺ";
	_g.h["MI_CHU"] = "ᴹᴵᴰᴵ\nCHᵁᴾ";
	_g.h["MI_SUS"] = "ᴹᴵᴰᴵ\nSust";
	_g.h["MI_PORT"] = "ᴹᴵᴰᴵ\nPort";
	_g.h["MI_SOST"] = "ᴹᴵᴰᴵ\nSost";
	_g.h["MI_SOFT"] = "ᴹᴵᴰᴵ\nSPedal";
	_g.h["MI_LEG"] = "ᴹᴵᴰᴵ\nLegat";
	_g.h["MI_MOD"] = "ᴹᴵᴰᴵ\nModul";
	_g.h["MI_MODSD"] = "ᴹᴵᴰᴵ\nModulᴰᴺ";
	_g.h["MI_MODSU"] = "ᴹᴵᴰᴵ\nModulᵁᴾ";
	_g.h["MI_BENDD"] = "ᴹᴵᴰᴵ\nBendᴰᴺ";
	_g.h["MI_BENDU"] = "ᴹᴵᴰᴵ\nBendᵁᴾ";
	$r = _g;
	return $r;
}(this));
vial_VialKeysWithShiftState.list = ["KC_1","KC_2","KC_3","KC_4","KC_5","KC_6","KC_7","KC_8","KC_9","KC_0","KC_MINUS","KC_EQUAL","KC_LBRACKET","KC_RBRACKET","KC_BSLASH","KC_SCOLON","KC_QUOTE","KC_GRAVE","KC_COMMA","KC_DOT","KC_SLASH","KC_NONUS_HASH","KC_NONUS_BSLASH","KC_RO","KC_KANA","KC_JYEN","KC_HENK","KC_MHEN","KC_LANG1","KC_LANG2"];
vial_VialKeysWithShiftState.map = (function($this) {
	var $r;
	var m = new haxe_ds_StringMap();
	{
		var _g = 0;
		var _g1 = vial_VialKeysWithShiftState.list;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			m.h[key] = true;
		}
	}
	$r = m;
	return $r;
}(this));
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
